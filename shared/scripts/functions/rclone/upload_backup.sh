#!/bin/bash

CONFIG_FILE="shared/config/config.sh"

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa `config.sh`
while [ ! -f "$CONFIG_FILE" ]; do
    CONFIG_FILE="../$CONFIG_FILE"
    if [ "$(pwd)" = "/" ]; then
        echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y config.sh!" >&2
        exit 1
    fi
done

source "$CONFIG_FILE"

RCLONE_CONFIG_FILE="shared/config/rclone/rclone.conf"

is_file_exist "$RCLONE_CONFIG_FILE" || { echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y t·∫≠p tin c·∫•u h√¨nh Rclone!${NC}"; exit 1; }

#!/bin/bash

CONFIG_FILE="shared/config/config.sh"

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa `config.sh`
while [ ! -f "$CONFIG_FILE" ]; do
    CONFIG_FILE="../$CONFIG_FILE"
    if [ "$(pwd)" = "/" ]; then
        echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y config.sh!" >&2
        exit 1
    fi
done

source "$CONFIG_FILE"

RCLONE_CONFIG_FILE="shared/config/rclone/rclone.conf"

is_file_exist "$RCLONE_CONFIG_FILE" || { echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y t·∫≠p tin c·∫•u h√¨nh Rclone!${NC}"; exit 1; }

# H√†m hi·ªÉn th·ªã danh s√°ch t·∫≠p tin backup v√† cho ph√©p ch·ªçn nhi·ªÅu t·∫≠p tin
select_backup_files() {
    local backup_dir="$1"
    local choice_list=()
    local selected_files=()

    # Ki·ªÉm tra th∆∞ m·ª•c backup c√≥ t·ªìn t·∫°i kh√¥ng
    if ! is_directory_exist "$backup_dir"; then
        echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c backup: $backup_dir${NC}"
        return 1
    fi

    # L·∫•y danh s√°ch c√°c t·∫≠p tin backup
    local backup_files=($(ls -1 "$backup_dir"))

    if [[ ${#backup_files[@]} -eq 0 ]]; then
        echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y t·∫≠p tin backup trong $backup_dir${NC}"
        return 1
    fi

    # T·∫°o danh s√°ch file cho `dialog`
    for file in "${backup_files[@]}"; do
        choice_list+=("$file" "$file" "off")
    done

    # Hi·ªÉn th·ªã `dialog` ƒë·ªÉ ch·ªçn file
    selected_files=$(dialog --stdout --separate-output --checklist "Ch·ªçn t·∫≠p tin backup ƒë·ªÉ upload b·∫±ng ph√≠m Spacebar, x√°c nh·∫≠n b·∫±ng Enter:" 15 60 10 "${choice_list[@]}")

    # N·∫øu kh√¥ng ch·ªçn file n√†o, upload t·∫•t c·∫£
    if [[ -z "$selected_files" ]]; then
        selected_files=("${backup_files[@]}")
    else
        # Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh m·∫£ng ƒë√∫ng c√°ch
        IFS=$'\n' read -r -d '' -a selected_files <<< "$(echo "$selected_files" | tr -d '\r')"
    fi

    echo "${selected_files[@]}"
}

# H√†m upload backup
#!/bin/bash

CONFIG_FILE="shared/config/config.sh"

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa `config.sh`
while [ ! -f "$CONFIG_FILE" ]; do
    CONFIG_FILE="../$CONFIG_FILE"
    if [ "$(pwd)" = "/" ]; then
        echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y config.sh!" >&2
        exit 1
    fi
done

source "$CONFIG_FILE"

RCLONE_CONFIG_FILE="shared/config/rclone/rclone.conf"

is_file_exist "$RCLONE_CONFIG_FILE" || { echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y t·∫≠p tin c·∫•u h√¨nh Rclone!${NC}"; exit 1; }

upload_backup() {
    echo -e "${BLUE}üì§ B·∫Øt ƒë·∫ßu upload backup...${NC}"

    if [[ $# -lt 1 ]]; then
        echo -e "${RED}‚ùå L·ªói: Thi·∫øu tham s·ªë storage!${NC}"
        echo -e "üìå C√°ch s·ª≠ d·ª•ng: $0 <storage> [file1] [file2] ..."
        return 1
    fi

    local storage="$1"
    shift
    local first_file="${1:-}"
    
    # L·∫•y site_name t·ª´ ƒë∆∞·ªùng d·∫´n file backup (d·ª± ƒëo√°n t·ª´ th∆∞ m·ª•c ch·ª©a file)
    local site_name=""
    if [[ -n "$first_file" ]]; then
        site_name=$(basename "$(dirname "$(dirname "$first_file")")")
    fi

    if [[ -z "$site_name" ]]; then
        echo -e "${RED}‚ùå L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh site_name t·ª´ ƒë∆∞·ªùng d·∫´n file backup!${NC}"
        return 1
    fi

    local log_dir="$SITES_DIR/$site_name/logs"
    local log_file="$log_dir/rclone-upload.log"

    is_directory_exist "$log_dir"

    # N·∫øu kh√¥ng c√≥ tham s·ªë file backup, h·ªèi ch·ªçn file
    local selected_files=()
    if [[ $# -eq 0 ]]; then
        echo -e "${BLUE}üìÇ Kh√¥ng c√≥ t·∫≠p tin backup n√†o ƒë∆∞·ª£c truy·ªÅn v√†o. Hi·ªÉn th·ªã h·ªôp tho·∫°i ch·ªçn file...${NC}"
        selected_files=($(select_backup_files "$SITES_DIR/$site_name/backups"))
    else
        selected_files=("$@")
    fi

    # Ki·ªÉm tra danh s√°ch file tr∆∞·ªõc khi upload
    if [[ ${#selected_files[@]} -eq 0 ]]; then
        echo -e "${RED}‚ùå Kh√¥ng c√≥ t·∫≠p tin h·ª£p l·ªá ƒë·ªÉ upload.${NC}" | tee -a "$log_file"
        return 1
    fi

    echo -e "${BLUE}üìÇ Danh s√°ch file s·∫Ω upload:${NC}" | tee -a "$log_file"
    for file in "${selected_files[@]}"; do
        echo "   ‚ûú $file" | tee -a "$log_file"
    done

    # Upload t·ª´ng t·∫≠p tin ƒë√£ ch·ªçn
    for file in "${selected_files[@]}"; do
        echo -e "${YELLOW}üöÄ Uploading: $file${NC}" | tee -a "$log_file"

        rclone --config "$RCLONE_CONFIG_FILE" copy "$file" "$storage:backup-folder" \
            --progress --log-file "$log_file"

        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}‚úÖ Upload th√†nh c√¥ng: $file${NC}" | tee -a "$log_file"
        else
            echo -e "${RED}‚ùå Upload th·∫•t b·∫°i: $file${NC}" | tee -a "$log_file"
        fi
    done

    echo -e "${GREEN}üì§ Ho√†n t·∫•t qu√° tr√¨nh upload backup l√™n storage!${NC}" | tee -a "$log_file"
}

# N·∫øu script ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp, th·ª±c hi·ªán upload
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    upload_backup "$@"
fi
