#!/bin/bash

CONFIG_FILE="shared/config/config.sh"

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa `config.sh`
while [ ! -f "$CONFIG_FILE" ]; do
    CONFIG_FILE="../$CONFIG_FILE"
    if [ "$(pwd)" = "/" ]; then
        echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y config.sh!" >&2
        exit 1
    fi
done

source "$CONFIG_FILE"

RCLONE_CONFIG_FILE="shared/config/rclone/rclone.conf"

is_file_exist "$RCLONE_CONFIG_FILE" || { echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y t·∫≠p tin c·∫•u h√¨nh Rclone! H√£y th·ª±c hi·ªán c·∫•u h√¨nh Rclone tr∆∞·ªõc.${NC}"; exit 1; }

# Ki·ªÉm tra n·∫øu `dialog` ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t, t·ª± ƒë·ªông c√†i ƒë·∫∑t
if ! command -v dialog &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è Dialog ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ti·∫øn h√†nh c√†i ƒë·∫∑t...${NC}"
    
    if [[ "$(uname)" == "Darwin" ]]; then
        brew install dialog || { echo -e "${RED}‚ùå L·ªói: C√†i ƒë·∫∑t dialog th·∫•t b·∫°i!${NC}"; exit 1; }
    elif [[ -f /etc/debian_version ]]; then
        sudo apt update && sudo apt install dialog -y || { echo -e "${RED}‚ùå L·ªói: C√†i ƒë·∫∑t dialog th·∫•t b·∫°i!${NC}"; exit 1; }
    elif [[ -f /etc/redhat-release ]]; then
        sudo yum install dialog -y || { echo -e "${RED}‚ùå L·ªói: C√†i ƒë·∫∑t dialog th·∫•t b·∫°i!${NC}"; exit 1; }
    else
        echo -e "${RED}‚ùå H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ t·ª± ƒë·ªông c√†i ƒë·∫∑t dialog. Vui l√≤ng c√†i ƒë·∫∑t th·ªß c√¥ng.${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ C√†i ƒë·∫∑t dialog th√†nh c√¥ng!${NC}"
fi

# H√†m hi·ªÉn th·ªã danh s√°ch t·∫≠p tin backup v√† cho ph√©p ch·ªçn nhi·ªÅu t·∫≠p tin
select_backup_files() {
    local backup_dir="$1"
    local choice_list=()
    local selected_files=()

    # Ki·ªÉm tra th∆∞ m·ª•c backup c√≥ t·ªìn t·∫°i kh√¥ng
    if ! is_directory_exist "$backup_dir"; then
        echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c backup: $backup_dir${NC}"
        return 1
    fi

    # L·∫•y danh s√°ch c√°c t·∫≠p tin backup
    local backup_files=($(ls -1 "$backup_dir"))

    if [[ ${#backup_files[@]} -eq 0 ]]; then
        echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y t·∫≠p tin backup trong $backup_dir${NC}"
        return 1
    fi

    # T·∫°o danh s√°ch file cho `dialog`
    for file in "${backup_files[@]}"; do
        choice_list+=("$file" "$file" "off")
    done

    # Hi·ªÉn th·ªã `dialog` ƒë·ªÉ ch·ªçn file
    selected_files=$(dialog --stdout --separate-output --checklist "Ch·ªçn t·∫≠p tin backup ƒë·ªÉ upload b·∫±ng ph√≠m Spacebar, x√°c nh·∫≠n b·∫±ng Enter:" 15 60 10 "${choice_list[@]}")

    # N·∫øu kh√¥ng ch·ªçn file n√†o, upload t·∫•t c·∫£
    if [[ -z "$selected_files" ]]; then
        selected_files=("${backup_files[@]}")
    else
        # Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh m·∫£ng ƒë√∫ng c√°ch
        IFS=$'\n' read -r -d '' -a selected_files <<< "$(echo "$selected_files" | tr -d '\r')"
    fi

    echo "${selected_files[@]}"
}

# H√†m upload backup
upload_backup() {
    select_website || return

    local storage="${1:-default}"  # N·∫øu kh√¥ng c√≥ tham s·ªë, d√πng storage m·∫∑c ƒë·ªãnh
    local backup_dir="$SITES_DIR/$SITE_NAME/backups"
    local log_dir="$SITES_DIR/$SITE_NAME/logs"
    local log_file="$log_dir/rclone-upload.log"

    is_directory_exist "$log_dir"

    # N·∫øu c√≥ tham s·ªë file backup, d√πng ngay
    if [[ $# -gt 1 ]]; then
        local selected_files=("${@:2}")  # L·∫•y danh s√°ch file t·ª´ tham s·ªë truy·ªÅn v√†o
    else
        # Hi·ªÉn th·ªã danh s√°ch t·∫≠p tin backup v√† cho ph√©p ch·ªçn
        local selected_files=($(select_backup_files "$backup_dir"))
    fi

    if [[ ${#selected_files[@]} -eq 0 ]]; then
        echo -e "${RED}‚ùå Kh√¥ng c√≥ t·∫≠p tin backup n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ upload.${NC}" | tee -a "$log_file"
        return 1
    fi

    echo -e "${BLUE}üì§ ƒêang upload c√°c t·∫≠p tin backup l√™n storage ($storage)...${NC}" | tee -a "$log_file"

    # Upload t·ª´ng t·∫≠p tin ƒë√£ ch·ªçn
    for file in "${selected_files[@]}"; do
        echo -e "${YELLOW}üöÄ Uploading: $file${NC}" | tee -a "$log_file"
        rclone --config "$RCLONE_CONFIG_FILE" copy "$backup_dir/$file" "$storage:backup-folder" \
            --progress --log-file "$log_file"

        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}‚úÖ Upload th√†nh c√¥ng: $file${NC}" | tee -a "$log_file"
        else
            echo -e "${RED}‚ùå Upload th·∫•t b·∫°i: $file${NC}" | tee -a "$log_file"
        fi
    done

    echo -e "${GREEN}üì§ Ho√†n t·∫•t qu√° tr√¨nh upload backup l√™n storage!${NC}" | tee -a "$log_file"
}

upload_backup "$@"
