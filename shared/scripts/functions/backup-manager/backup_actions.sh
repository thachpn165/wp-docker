#!/bin/bash

# Import c√°c h√†m c·∫ßn thi·∫øt t·ª´ backup-manager
source "$SCRIPTS_FUNCTIONS_DIR/backup-manager/backup_files.sh"
source "$SCRIPTS_FUNCTIONS_DIR/backup-manager/backup_database.sh"
source "$SCRIPTS_FUNCTIONS_DIR/backup-manager/cleanup_backups.sh"
source "$SCRIPTS_FUNCTIONS_DIR/rclone/manage_rclone.sh"

backup_website() {
    select_website || return

    local env_file="$SITES_DIR/$SITE_NAME/.env"
    local web_root="$SITES_DIR/$SITE_NAME/wordpress"
    local backup_dir="$(realpath "$SITES_DIR/$SITE_NAME/backups")"
    local log_dir="$(realpath "$SITES_DIR/$SITE_NAME/logs")"
    local db_backup_file=""
    local files_backup_file=""
    local storage_choice=""
    local selected_storage=""

    is_directory_exist "$backup_dir"
    is_directory_exist "$log_dir"

    if [[ ! -f "$env_file" ]]; then
        echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y t·∫≠p tin .env trong $SITES_DIR/$SITE_NAME!${NC}"
        return 1
    fi

    # L·∫•y th√¥ng tin database t·ª´ .env
    DB_NAME=$(grep "^MYSQL_DATABASE=" "$env_file" | cut -d '=' -f2)
    DB_USER=$(grep "^MYSQL_USER=" "$env_file" | cut -d '=' -f2)
    DB_PASS=$(grep "^MYSQL_PASSWORD=" "$env_file" | cut -d '=' -f2)

    if [[ -z "$DB_NAME" || -z "$DB_USER" || -z "$DB_PASS" ]]; then
        echo -e "${RED}‚ùå L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin database t·ª´ .env!${NC}"
        return 1
    fi

    echo -e "${GREEN}‚úÖ ƒêang chu·∫©n b·ªã sao l∆∞u website: $SITE_NAME${NC}"
    echo -e "üìÇ M√£ ngu·ªìn: $web_root"
    echo -e "üóÑÔ∏è Database: $DB_NAME (User: $DB_USER)"

    # H·ªèi ng∆∞·ªùi d√πng n∆°i l∆∞u backup tr∆∞·ªõc khi backup
    echo -e "${BLUE}üìÇ Ch·ªçn n∆°i l∆∞u backup:${NC}"
    echo -e "  ${GREEN}[1]${NC} üíæ L∆∞u v√†o m√°y ch·ªß (local)"
    echo -e "  ${GREEN}[2]${NC} ‚òÅÔ∏è  L∆∞u v√†o Storage ƒë√£ thi·∫øt l·∫≠p"
    read -p "üîπ Ch·ªçn m·ªôt t√πy ch·ªçn (1-2): " storage_choice

    if [[ "$storage_choice" == "2" ]]; then
        echo -e "${BLUE}üìÇ ƒêang l·∫•y danh s√°ch Storage t·ª´ rclone.conf...${NC}"

        # G·ªçi `rclone_storage_list()` ƒë·ªÉ l·∫•y danh s√°ch Storage
        local storages=()
        while IFS= read -r line; do
            storages+=("$line")
        done < <(rclone_storage_list)

        if [[ ${#storages[@]} -eq 0 ]]; then
            echo -e "${RED}‚ùå Kh√¥ng c√≥ Storage n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p trong rclone.conf!${NC}"
            return 1
        fi

        # Hi·ªÉn th·ªã danh s√°ch Storage r√µ r√†ng
        echo -e "${BLUE}üìÇ Danh s√°ch Storage kh·∫£ d·ª•ng:${NC}"
        for storage in "${storages[@]}"; do
            echo -e "  ${GREEN}‚ûú${NC} ${CYAN}$storage${NC}"
        done

        echo -e "${YELLOW}üí° H√£y nh·∫≠p ch√≠nh x√°c t√™n Storage t·ª´ danh s√°ch tr√™n.${NC}"
        while true; do
            read -p "üîπ Nh·∫≠p t√™n Storage ƒë·ªÉ s·ª≠ d·ª•ng: " selected_storage
            selected_storage=$(echo "$selected_storage" | xargs)  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a

            # Ki·ªÉm tra n·∫øu storage t·ªìn t·∫°i trong danh s√°ch
            if [[ " ${storages[*]} " =~ " ${selected_storage} " ]]; then
                echo -e "${GREEN}‚òÅÔ∏è  ƒê√£ ch·ªçn Storage: '$selected_storage'${NC}"
                break
            else
                echo -e "${RED}‚ùå Storage kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng t√™n Storage.${NC}"
            fi
        done
    fi

    # B·∫Øt ƒë·∫ßu ti·∫øn tr√¨nh backup
    echo -e "${YELLOW}üîπ ƒêang sao l∆∞u database v√† m√£ ngu·ªìn...${NC}"
    db_backup_file=$(backup_database "$SITE_NAME" "$DB_NAME" "$DB_USER" "$DB_PASS" | tail -n 1)
    files_backup_file=$(backup_files "$SITE_NAME" "$web_root" | tail -n 1)

    # Ki·ªÉm tra n·∫øu file backup ƒë√£ t·ªìn t·∫°i
    if [[ ! -f "$db_backup_file" || ! -f "$files_backup_file" ]]; then
        echo -e "${RED}‚ùå L·ªói: Kh√¥ng th·ªÉ t√¨m th·∫•y t·∫≠p tin backup!${NC}"
        echo -e "${RED}üõë ƒê∆∞·ªùng d·∫´n ki·ªÉm tra:${NC}"
        echo -e "üìÇ Database: $db_backup_file"
        echo -e "üìÇ Files: $files_backup_file"
        return 1
    fi

    if [[ "$storage_choice" == "1" ]]; then
        echo -e "${GREEN}üíæ Backup ho√†n t·∫•t v√† l∆∞u t·∫°i: $backup_dir${NC}"
    elif [[ "$storage_choice" == "2" ]]; then
        echo -e "${GREEN}‚òÅÔ∏è  ƒêang l∆∞u backup l√™n Storage: '$selected_storage'${NC}"

        # Ki·ªÉm tra storage c√≥ t·ªìn t·∫°i trong rclone.conf kh√¥ng
        if ! grep -q "^\[$selected_storage\]" "$RCLONE_CONFIG_FILE"; then
            echo -e "${RED}‚ùå L·ªói: Storage '$selected_storage' kh√¥ng t·ªìn t·∫°i trong rclone.conf!${NC}"
            return 1
        fi

        # G·ªçi upload backup
        bash "$SCRIPTS_FUNCTIONS_DIR/rclone/upload_backup.sh" "$selected_storage" "$db_backup_file" "$files_backup_file"

        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}‚úÖ Backup v√† upload l√™n Storage ho√†n t·∫•t!${NC}"
        else
            echo -e "${RED}‚ùå L·ªói khi upload backup l√™n Storage!${NC}"
        fi
    fi
}


# Ch·ª©c nƒÉng x√≥a backup c≈©
cleanup_old_backups() {
    select_website || return

    read -p "Gi·ªØ l·∫°i backup trong bao nhi√™u ng√†y? (VD: 7): " RETENTION_DAYS
    cleanup_backups "$SITE_NAME" "$RETENTION_DAYS"
}

# Ch·ª©c nƒÉng xem danh s√°ch backup
list_backup_files() {
    select_website || return

    local backup_dir="$SITES_DIR/$SITE_NAME/backups"

    if ! is_directory_exist "$backup_dir"; then
        echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c backup trong $backup_dir${NC}"
        return 1
    fi

    echo -e "${BLUE}üìÇ Danh s√°ch backup c·ªßa $SITE_NAME:${NC}"

    # X√°c ƒë·ªãnh h·ªá ƒëi·ªÅu h√†nh (macOS ho·∫∑c Linux)
    if [[ "$(uname)" == "Darwin" ]]; then
        FIND_CMD="ls -lt $backup_dir | awk '{print \$6, \$7, \$8, \$9}'"
    else
        FIND_CMD="find $backup_dir -type f -printf '%TY-%Tm-%Td %TH:%TM %p\n' | sort -r"
    fi

    # Hi·ªÉn th·ªã backup database
    echo -e "${GREEN}üóÑÔ∏è Backup Database:${NC}"
    eval "$FIND_CMD" | grep "db-.*\.sql" | awk '{print "  üìÑ " $1, $2, "-", $NF}'

    # Hi·ªÉn th·ªã backup m√£ ngu·ªìn
    echo -e "${YELLOW}üìÇ Backup M√£ ngu·ªìn:${NC}"
    eval "$FIND_CMD" | grep "files-.*\.tar.gz" | awk '{print "  üì¶ " $1, $2, "-", $NF}'
}



