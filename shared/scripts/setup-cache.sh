#!/bin/bash

CONFIG_FILE="shared/config/config.sh"
source "$CONFIG_FILE"

# ‚úÖ Hi·ªÉn th·ªã danh s√°ch c√°c website c√≥ s·∫µn
echo -e "${YELLOW}üîç Danh s√°ch website c√≥ s·∫µn:${NC}"
site_list=($(ls -1 "$SITES_DIR"))
for i in "${!site_list[@]}"; do
    echo -e "  ${GREEN}[${i}]${NC} ${site_list[$i]}"
done
echo ""

# ‚úÖ Ng∆∞·ªùi d√πng ch·ªçn website
read -p "Nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi website b·∫°n mu·ªën c√†i ƒë·∫∑t cache: " site_index
site_name="${site_list[$site_index]}"

# ‚úÖ X√°c ƒë·ªãnh th∆∞ m·ª•c & t·∫≠p tin c·∫ßn thao t√°c
SITE_DIR="$SITES_DIR/$site_name"
CACHE_CONF_DIR="$NGINX_PROXY_DIR/cache"
NGINX_CONF_FILE="$NGINX_PROXY_DIR/conf.d/${site_name}.conf"
WP_CONFIG_FILE="$SITE_DIR/wordpress/wp-config.php"
PHP_CONTAINER="$site_name-php"
NGINX_MAIN_CONF="/etc/nginx/nginx.conf"

# ‚úÖ Ki·ªÉm tra website c√≥ t·ªìn t·∫°i kh√¥ng
if [ ! -d "$SITE_DIR" ]; then
    echo -e "${RED}‚ùå Website kh√¥ng t·ªìn t·∫°i!${NC}"
    exit 1
fi

# ‚úÖ Hi·ªÉn th·ªã menu cache
echo -e "${YELLOW}üîß Ch·ªçn lo·∫°i cache m·ªõi cho website:${NC}"
echo -e "  ${GREEN}[1]${NC} WP Super Cache"
echo -e "  ${GREEN}[2]${NC} FastCGI Cache & Redis Object Cache"
echo -e "  ${GREEN}[3]${NC} W3 Total Cache"
echo -e "  ${GREEN}[4]${NC} WP Fastest Cache"
echo -e "  ${GREEN}[5]${NC} Kh√¥ng c√≥ cache (T·∫Øt t·∫•t c·∫£)"
echo ""

read -p "Ch·ªçn lo·∫°i cache (1-4): " cache_choice
case $cache_choice in
    1) cache_type="wp-super-cache"; plugin_slug="wp-super-cache" ;;
    2) cache_type="fastcgi-cache"; plugin_slug="nginx-helper" ;;
    3) cache_type="w3-total-cache"; plugin_slug="w3-total-cache" ;;
    4) cache_type="wp-fastest-cache"; plugin_slug="wp-fastest-cache" ;;
    5) cache_type="no-cache" ;;
    *) echo -e "${RED}‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!${NC}" && exit 1 ;;
esac

# ‚úÖ Ki·ªÉm tra c√°c plugin cache hi·ªán t·∫°i v√† t·∫Øt n·∫øu c·∫ßn
cache_plugins=("wp-super-cache" "nginx-helper" "w3-total-cache" "redis-cache" "wp-fastest-cache")
#active_plugins=$(docker exec -u root "$PHP_CONTAINER" wp plugin list --status=active --field=name --allow-root --path=/var/www/html)
active_plugins=$(docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp plugin list --status=active --field=name --path=/var/www/html" &> /dev/null)

for plugin in "${cache_plugins[@]}"; do
    if echo "$active_plugins" | grep -q "$plugin"; then
        echo -e "${YELLOW}‚ö†Ô∏è Plugin $plugin ƒëang ho·∫°t ƒë·ªông, s·∫Ω b·ªã v√¥ hi·ªáu ho√° tr∆∞·ªõc khi k√≠ch ho·∫°t plugin m·ªõi.${NC}"
        #docker exec -u root "$PHP_CONTAINER" wp plugin deactivate "$plugin" --allow-root --path=/var/www/html
        docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp plugin deactivate "$plugin" --path=/var/www/html"
    fi
done

# ‚úÖ N·∫øu ch·ªçn no-cache, xo√° to√†n b·ªô plugin cache v√† WP_CACHE
if [[ "$cache_type" == "no-cache" ]]; then
    echo -e "${YELLOW}üõë T·∫Øt to√†n b·ªô plugin cache...${NC}"
    for plugin in "${cache_plugins[@]}"; do
        #docker exec -u root "$PHP_CONTAINER" wp plugin deactivate "$plugin" --allow-root --path=/var/www/html
        docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp plugin deactivate "$plugin" --path=/var/www/html"
        #docker exec -u root "$PHP_CONTAINER" wp plugin delete "$plugin" --allow-root --path=/var/www/html
        docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp plugin delete "$plugin" --path=/var/www/html"
    done

    echo -e "${YELLOW}üßπ Xo√° \`WP_CACHE\` trong wp-config.php...${NC}"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "/define('WP_CACHE', true);/d" "$WP_CONFIG_FILE"
    else
        sed -i "/define('WP_CACHE', true);/d" "$WP_CONFIG_FILE"
    fi

    echo -e "${GREEN}‚úÖ T·∫•t c·∫£ plugin cache ƒë√£ b·ªã xo√° v√† \`WP_CACHE\` ƒë√£ b·ªã g·ª° b·ªè.${NC}"
    exit 0
fi

# ‚úÖ C·∫≠p nh·∫≠t `include` trong NGINX n·∫øu c·∫ßn
if grep -q "include /etc/nginx/cache/" "$NGINX_CONF_FILE"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s|include /etc/nginx/cache/.*;|include /etc/nginx/cache/${cache_type}.conf;|" "$NGINX_CONF_FILE"
    else
        sed -i "s|include /etc/nginx/cache/.*;|include /etc/nginx/cache/${cache_type}.conf;|" "$NGINX_CONF_FILE"
    fi
    echo -e "${GREEN}‚úÖ C·∫•u h√¨nh NGINX ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: $cache_type${NC}"
else
    echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y d√≤ng include cache trong c·∫•u h√¨nh NGINX!${NC}"
    exit 1
fi

# ‚úÖ C√†i ƒë·∫∑t plugin cache m·ªõi
if [[ "$cache_type" != "no-cache" ]]; then
    #docker exec -u root "$PHP_CONTAINER" wp plugin install $plugin_slug --activate --path=/var/www/html --allow-root
    docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp plugin install $plugin_slug --activate --path=/var/www/html"
    docker exec -u root -i "$PHP_CONTAINER" sh -c "chown -R www-data:www-data /var/www/html/wp-content"
    echo -e "${GREEN}‚úÖ Plugin cache ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† k√≠ch ho·∫°t: $plugin_slug${NC}"
fi

# ‚úÖ **Ki·ªÉm tra `<?php` trong `wp-config.php` tr∆∞·ªõc khi ch√®n**
if ! grep -q "<?php" "$WP_CONFIG_FILE"; then
    echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y `<?php` trong wp-config.php!${NC}"
    exit 1
fi

# ‚úÖ C·∫•u h√¨nh FastCGI Cache
if [[ "$cache_choice" == "2" || "$cache_choice" == "3" ]]; then
    echo -e "${YELLOW}‚ö° C·∫•u h√¨nh FastCGI Cache...${NC}"

    # Ki·ªÉm tra n·∫øu fastcgi_cache_path ƒë√£ t·ªìn t·∫°i, n·∫øu c√≥ th√¨ b·ªè qua
    if ! docker exec nginx-proxy grep -q "fastcgi_cache_path" "$NGINX_MAIN_CONF"; then
        if docker exec nginx-proxy grep -q "http {" "$NGINX_MAIN_CONF"; then
            echo -e "${YELLOW}‚ûï Ch√®n fastcgi_cache_path v√†o http {}...${NC}"
            docker exec nginx-proxy sed -i "/http {/a\\
            fastcgi_cache_path /var/cache/nginx/fastcgi_cache levels=1:2 keys_zone=WORDPRESS:100m inactive=60m use_temp_path=off;" "$NGINX_MAIN_CONF"
        else
            echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y block http {} trong nginx.conf! H√£y ki·ªÉm tra l·∫°i c·∫•u h√¨nh.${NC}"
            exit 1
        fi
    fi
    echo -e "${GREEN}‚úÖ FastCGI Cache ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.${NC}"

    # üõ†Ô∏è K√≠ch ho·∫°t t√≠nh nƒÉng purge cache cho nginx-helper
    echo -e "${YELLOW}‚ö° ƒêang b·∫≠t t√≠nh nƒÉng purge cache cho nginx-helper...${NC}"
    #docker exec -u root "$PHP_CONTAINER" wp option update rt_wp_nginx_helper_options '{"enable_purge":true}' --format=json --allow-root --path=/var/www/html
    docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp option update rt_wp_nginx_helper_options '{"enable_purge":true}' --format=json --path=/var/www/html"
    echo -e "${GREEN}‚úÖ T√≠nh nƒÉng purge cache ƒë√£ ƒë∆∞·ª£c b·∫≠t.${NC}"
fi

# ‚úÖ C·∫•u h√¨nh Redis Object Cache (ch·ªâ n·∫øu ch·ªçn FastCGI Cache + Redis)
if [[ "$cache_choice" == "2" ]]; then
    echo -e "${YELLOW}‚ö° C·∫•u h√¨nh Redis Object Cache...${NC}"

    # üõ†Ô∏è Ki·ªÉm tra v√† ch√®n `WP_REDIS_HOST` v√†o ngay sau `<?php`
    if ! grep -q "WP_REDIS_HOST" "$WP_CONFIG_FILE"; then
        echo -e "${YELLOW}üîß Ch√®n c·∫•u h√¨nh Redis v√†o wp-config.php...${NC}"
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "/<?php/a\\
            define('WP_REDIS_HOST', 'redis-cache');\\
            define('WP_REDIS_PORT', 6379);\\
            define('WP_REDIS_DATABASE', 0);" "$WP_CONFIG_FILE"
        else
            sed -i "/<?php/a\\
            define('WP_REDIS_HOST', 'redis-cache');\\
            define('WP_REDIS_PORT', 6379);\\
            define('WP_REDIS_DATABASE', 0);" "$WP_CONFIG_FILE"
        fi
        echo -e "${GREEN}‚úÖ C·∫•u h√¨nh Redis ƒë√£ ƒë∆∞·ª£c th√™m v√†o wp-config.php.${NC}"
    fi

    # üõ†Ô∏è C√†i ƒë·∫∑t v√† k√≠ch ho·∫°t Redis Cache
    echo -e "${YELLOW}‚ö° ƒêang c√†i ƒë·∫∑t v√† k√≠ch ho·∫°t Redis Object Cache...${NC}"
    #docker exec -u root "$PHP_CONTAINER" wp plugin install redis-cache --activate --allow-root --path=/var/www/html
    #docker exec -u root "$PHP_CONTAINER" wp redis update-dropin --allow-root --path=/var/www/html
    #docker exec -u root "$PHP_CONTAINER" wp redis enable --allow-root --path=/var/www/html

    docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp plugin install redis-cache --activate --path=/var/www/html"
    docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp redis update-dropin --path=/var/www/html"
    docker exec -u "$PHP_USER" -i "$PHP_CONTAINER" sh -c "wp redis enable --path=/var/www/html"

    echo -e "${GREEN}‚úÖ Redis Object Cache ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† k√≠ch ho·∫°t.${NC}"

    # üõ†Ô∏è Ki·ªÉm tra v√† ch√®n `WP_CACHE` ngay sau `<?php`
    if grep -q "define('WP_CACHE', false);" "$WP_CONFIG_FILE"; then
        echo -e "${YELLOW}üîÑ C·∫≠p nh·∫≠t WP_CACHE th√†nh true...${NC}"
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s|define('WP_CACHE', false);|define('WP_CACHE', true);|" "$WP_CONFIG_FILE"
        else
            sed -i "s|define('WP_CACHE', false);|define('WP_CACHE', true);|" "$WP_CONFIG_FILE"
        fi
    elif ! grep -q "define('WP_CACHE'" "$WP_CONFIG_FILE"; then
        echo -e "${YELLOW}‚ûï Ch√®n WP_CACHE v√†o wp-config.php...${NC}"
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "/<?php/a\\
            define('WP_CACHE', true);" "$WP_CONFIG_FILE"
        else
            sed -i "/<?php/a\\
            define('WP_CACHE', true);" "$WP_CONFIG_FILE"
        fi
    fi
fi


# ‚úÖ H∆∞·ªõng d·∫´n k√≠ch ho·∫°t WP Super Cache n·∫øu c·∫ßn
if [[ "$cache_type" == "wp-super-cache" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è H∆∞·ªõng d·∫´n ho√†n t·∫•t c√†i ƒë·∫∑t WP Super Cache:${NC}"
    echo -e "  1Ô∏è‚É£ Truy c·∫≠p v√†o WordPress Admin -> Settings -> WP Super Cache."
    echo -e "  2Ô∏è‚É£ B·∫≠t 'Caching On' ƒë·ªÉ k√≠ch ho·∫°t cache."
    echo -e "  3Ô∏è‚É£ Ch·ªçn 'Expert' trong 'Cache Delivery Method'."
    echo -e "  4Ô∏è‚É£ L∆∞u c√†i ƒë·∫∑t v√† ki·ªÉm tra cache ho·∫°t ƒë·ªông."
fi

# ‚úÖ H∆∞·ªõng d·∫´n k√≠ch ho·∫°t W3 Total Cache n·∫øu c·∫ßn
if [[ "$cache_type" == "w3-total-cache" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è H∆∞·ªõng d·∫´n ho√†n t·∫•t c√†i ƒë·∫∑t W3 Total Cache:${NC}"
    echo -e "  1Ô∏è‚É£ Truy c·∫≠p v√†o WordPress Admin -> Performance -> General Settings."
    echo -e "  2Ô∏è‚É£ B·∫≠t t·∫•t c·∫£ c√°c lo·∫°i cache ph√π h·ª£p (Page Cache, Object Cache, Database Cache)."
    echo -e "  3Ô∏è‚É£ L∆∞u c√†i ƒë·∫∑t v√† ki·ªÉm tra cache ho·∫°t ƒë·ªông."
fi

# ‚úÖ H∆∞·ªõng d·∫´n k√≠ch ho·∫°t WP Fastest Cache n·∫øu c·∫ßn
if [[ "$cache_type" == "wp-fastest-cache" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è H∆∞·ªõng d·∫´n ho√†n t·∫•t c√†i ƒë·∫∑t WP Fastest Cache:${NC}"
    echo -e "  1Ô∏è‚É£ Truy c·∫≠p v√†o WordPress Admin -> WP Fastest Cache."
    echo -e "  2Ô∏è‚É£ B·∫≠t t√πy ch·ªçn 'Enable Cache'."
    echo -e "  3Ô∏è‚É£ Ch·ªçn 'Cache System' ph√π h·ª£p."
    echo -e "  4Ô∏è‚É£ L∆∞u c√†i ƒë·∫∑t v√† ki·ªÉm tra cache ho·∫°t ƒë·ªông."
fi

# ‚úÖ Restart NGINX ƒë·ªÉ √°p d·ª•ng c·∫•u h√¨nh m·ªõi
docker exec nginx-proxy nginx -s reload
echo -e "${GREEN}‚úÖ NGINX ƒë√£ ƒë∆∞·ª£c reload ƒë·ªÉ √°p d·ª•ng cache m·ªõi.${NC}"
