#!/bin/bash

CONFIG_FILE="shared/config/config.sh"

# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa `config.sh`
while [ ! -f "$CONFIG_FILE" ]; do
    CONFIG_FILE="../$CONFIG_FILE"
    if [ "$(pwd)" = "/" ]; then
        echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y config.sh!" >&2
        exit 1
    fi
done

source "$CONFIG_FILE"

# üõ† **Ki·ªÉm tra bi·∫øn quan tr·ªçng**
required_vars=("PROJECT_ROOT" "SITES_DIR" "PROXY_SCRIPT" "PROXY_CONF_DIR" "SSL_DIR" "NGINX_PROXY_CONTAINER")

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo -e "${RED}‚ùå L·ªói: Bi·∫øn '$var' ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong config.sh${NC}"
        exit 1
    fi
done

# üìã **Hi·ªÉn th·ªã danh s√°ch website ƒë·ªÉ ch·ªçn**
echo -e "${YELLOW}üìã Danh s√°ch c√°c website c√≥ th·ªÉ x√≥a:${NC}"
site_list=($(ls -1 "$SITES_DIR"))

if [ ${#site_list[@]} -eq 0 ]; then
    echo -e "${RED}‚ùå Kh√¥ng c√≥ website n√†o ƒë·ªÉ x√≥a.${NC}"
    exit 1
fi

for i in "${!site_list[@]}"; do
    echo -e "  ${GREEN}[$i]${NC} ${site_list[$i]}"
done

echo ""
read -p "Nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi website c·∫ßn x√≥a: " site_index
site_name="${site_list[$site_index]}"

SITE_DIR="$SITES_DIR/$site_name"
ENV_FILE="$SITE_DIR/.env"

# **Ki·ªÉm tra xem website c√≥ t·ªìn t·∫°i kh√¥ng**
if ! is_directory_exist "$SITE_DIR"; then
    echo -e "${RED}‚ùå Website '$site_name' kh√¥ng t·ªìn t·∫°i!${NC}"
    exit 1
fi

# **L·∫•y th√¥ng tin domain t·ª´ .env**
if is_file_exist "$ENV_FILE"; then
    DOMAIN=$(fetch_env_variable "$ENV_FILE" "DOMAIN")
    mariadb_volume="${site_name}_mariadb_data"
else
    echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y file .env c·ªßa website!${NC}"
    exit 1
fi

SITE_CONF_FILE="$PROXY_CONF_DIR/$site_name.conf"

# üö® **Hi·ªÉn th·ªã c·∫£nh b√°o**
clear
echo -e "${RED}${BOLD}üö® C·∫¢NH B√ÅO QUAN TR·ªåNG üö®${NC}"
echo -e "${RED}‚ùó Vi·ªác x√≥a website l√† thao t√°c kh√¥ng th·ªÉ ho√†n t√°c! ‚ùó${NC}"
echo -e "${YELLOW}üìå Vui l√≤ng backup d·ªØ li·ªáu tr∆∞·ªõc khi ti·∫øp t·ª•c.${NC}"
echo ""

# **X√°c nh·∫≠n x√≥a website**
if ! confirm_action "‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a website '$site_name' ($DOMAIN)?"; then
    echo -e "${YELLOW}‚ö†Ô∏è H·ªßy thao t√°c x√≥a website '${site_name}'.${NC}"
    exit 0
fi

# **H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën x√≥a m√£ ngu·ªìn website kh√¥ng**
if confirm_action "‚ö†Ô∏è B·∫°n c√≥ mu·ªën x√≥a to√†n b·ªô m√£ ngu·ªìn WordPress c·ªßa '$site_name'?"; then
    delete_source_flag=true
else
    delete_source_flag=false
fi

# **H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën x√≥a volume MariaDB kh√¥ng**
if confirm_action "‚ö†Ô∏è B·∫°n c√≥ mu·ªën x√≥a volume database MariaDB c·ªßa '$site_name'?"; then
    delete_mariadb_flag=true
else
    delete_mariadb_flag=false
fi

echo -e "${BLUE}üîÑ ƒêang x√≥a website '$site_name'...${NC}"

# **D·ª´ng & x√≥a container**
cd "$SITE_DIR"
docker-compose down
cd "$PROJECT_ROOT"

# **X√≥a m√£ ngu·ªìn n·∫øu ng∆∞·ªùi d√πng ch·ªçn**
if [ "$delete_source_flag" = true ]; then
    echo -e "${YELLOW}üóëÔ∏è ƒêang x√≥a th∆∞ m·ª•c logs c·ªßa '$site_name'...${NC}"
    remove_directory "$SITE_DIR/logs"
    echo -e "${GREEN}‚úÖ Th∆∞ m·ª•c logs c·ªßa '$site_name' ƒë√£ b·ªã x√≥a!${NC}"
    
    echo -e "${YELLOW}üóëÔ∏è ƒêang x√≥a m√£ ngu·ªìn WordPress c·ªßa '$site_name'...${NC}"
    remove_directory "$SITE_DIR"
    echo -e "${GREEN}‚úÖ M√£ ngu·ªìn WordPress c·ªßa '$site_name' ƒë√£ b·ªã x√≥a!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Gi·ªØ l·∫°i m√£ ngu·ªìn WordPress c·ªßa '$site_name'.${NC}"
fi

# **X√≥a ch·ª©ng ch·ªâ SSL c·ªßa website**
SSL_CRT_FILE="$SSL_DIR/$DOMAIN.crt"
SSL_KEY_FILE="$SSL_DIR/$DOMAIN.key"
if is_file_exist "$SSL_CRT_FILE" || is_file_exist "$SSL_KEY_FILE"; then
    echo -e "${YELLOW}üóëÔ∏è ƒêang x√≥a ch·ª©ng ch·ªâ SSL c·ªßa '$DOMAIN'...${NC}"
    remove_file "$SSL_CRT_FILE"
    remove_file "$SSL_KEY_FILE"
    echo -e "${GREEN}‚úÖ Ch·ª©ng ch·ªâ SSL c·ªßa '$DOMAIN' ƒë√£ b·ªã x√≥a.${NC}"
else
    echo -e "${RED}‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·∫≠p tin ch·ª©ng ch·ªâ SSL ($DOMAIN.crt ho·∫∑c $DOMAIN.key). B·ªè qua.${NC}"
fi

# **X√≥a volume MariaDB n·∫øu ng∆∞·ªùi d√πng ch·ªçn**
if [ "$delete_mariadb_flag" = true ]; then
    remove_volume "$mariadb_volume"
    echo -e "${GREEN}‚úÖ Volume MariaDB c·ªßa '$site_name' ƒë√£ b·ªã x√≥a!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Gi·ªØ l·∫°i volume MariaDB c·ªßa '$site_name'.${NC}"
fi

# **X√≥a file c·∫•u h√¨nh NGINX c·ªßa website**
if is_file_exist "$SITE_CONF_FILE"; then
    echo -e "${YELLOW}üóëÔ∏è ƒêang x√≥a c·∫•u h√¨nh NGINX c·ªßa '$DOMAIN'...${NC}"
    remove_file "$SITE_CONF_FILE"
    echo -e "${GREEN}‚úÖ C·∫•u h√¨nh NGINX c·ªßa '$DOMAIN' ƒë√£ ƒë∆∞·ª£c x√≥a.${NC}"
else
    echo -e "${RED}‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh $SITE_CONF_FILE. B·ªè qua.${NC}"
fi

# üõ† **X√≥a website kh·ªèi `docker-compose.override.yml`**
OVERRIDE_FILE="$NGINX_PROXY_DIR/docker-compose.override.yml"
MOUNT_ENTRY="      - ../sites/$site_name/wordpress:/var/www/$site_name"
MOUNT_LOGS="      - ../sites/$site_name/logs:/var/www/logs/$site_name"

if [ -f "$OVERRIDE_FILE" ]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "/$(echo "$MOUNT_ENTRY" | sed 's/[\/&]/\\&/g')/d" "$OVERRIDE_FILE"
        sed -i '' "/$(echo "$MOUNT_LOGS" | sed 's/[\/&]/\\&/g')/d" "$OVERRIDE_FILE"
    else
        sed -i "/$(echo "$MOUNT_ENTRY" | sed 's/[\/&]/\\&/g')/d" "$OVERRIDE_FILE"
        sed -i "/$(echo "$MOUNT_LOGS" | sed 's/[\/&]/\\&/g')/d" "$OVERRIDE_FILE"
    fi
    
    echo -e "${GREEN}‚úÖ ƒê√£ x√≥a website '$site_name' v√† logs kh·ªèi docker-compose.override.yml.${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y docker-compose.override.yml, b·ªè qua.${NC}"
fi


# **Reload NGINX Proxy ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i c·∫•u h√¨nh**
restart_nginx_proxy

echo -e "${GREEN}‚úÖ Ho√†n t·∫•t x√≥a website '$site_name'.${NC}"

read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."