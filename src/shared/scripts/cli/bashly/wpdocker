#!/usr/bin/env bash
# This script was generated by bashly 1.2.11 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
wpdocker_usage() {
  printf "wpdocker - Manage WordPress Docker environments easily\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker COMMAND\n"
  printf "  wpdocker [COMMAND] --help | -h\n"
  printf "  wpdocker --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Show command menu\n" "menu    "
  printf "  %s   Manage WordPress websites\n" "website "
  printf "  %s   SSL certificate management\n" "ssl     "
  printf "  %s   Manage PHP versions and configuration\n" "php     "
  printf "  %s   Manage backups for WordPress sites\n" "backup  "
  printf "  %s   Manage database operations\n" "database"
  printf "  %s   WordPress tools\n" "wp      "
  printf "  %s   System operations\n" "system  "
  printf "  %s   Run cron tasks\n" "cron    "
  printf "  %s   Core management\n" "core    "
  printf "  %s   NGINX actions\n" "nginx   "
  printf "  %s   Rclone operations\n" "rclone  "
  printf "  %s   Debugging tools\n" "debug   "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
wpdocker_menu_usage() {
  printf "wpdocker menu - Show command menu\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker menu\n"
  printf "  wpdocker menu --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_usage() {
  printf "wpdocker website - Manage WordPress websites\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website COMMAND\n"
  printf "  wpdocker website [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create a new WordPress site\n" "create         "
  printf "  %s   Delete an existing site\n" "delete         "
  printf "  %s   List all WordPress sites\n" "list           "
  printf "  %s   Restart a site\n" "restart        "
  printf "  %s   Show site logs\n" "logs           "
  printf "  %s   Show site info\n" "info           "
  printf "  %s   Restore site from backup\n" "restore        "
  printf "  %s   Update site template\n" "update_template"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_create_usage() {
  printf "wpdocker website create - Create a new WordPress site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website create DOMAIN PHP [AUTO_GENERATE]\n"
  printf "  wpdocker website create --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name for the new site\n"
    echo

    # :argument.usage
    printf "  %s\n" "PHP"
    printf "    PHP version for the new site\n"
    echo

    # :argument.usage
    printf "  %s\n" "AUTO_GENERATE"
    printf "    Auto-generate secure passwords for the site\n"
    printf "    %s\n" "Default: true"
    echo

  fi
}

# :command.usage
wpdocker_website_delete_usage() {
  printf "wpdocker website delete - Delete an existing site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website delete DOMAIN [BACKUP]\n"
  printf "  wpdocker website delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to delete\n"
    echo

    # :argument.usage
    printf "  %s\n" "BACKUP"
    printf "    Backup before deletion\n"
    printf "    %s\n" "Default: true"
    echo

  fi
}

# :command.usage
wpdocker_website_list_usage() {
  printf "wpdocker website list - List all WordPress sites\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website list\n"
  printf "  wpdocker website list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_restart_usage() {
  printf "wpdocker website restart - Restart a site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website restart DOMAIN\n"
  printf "  wpdocker website restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to restart\n"
    echo

  fi
}

# :command.usage
wpdocker_website_logs_usage() {
  printf "wpdocker website logs - Show site logs\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website logs DOMAIN LOG_TYPE\n"
  printf "  wpdocker website logs --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to show logs\n"
    echo

    # :argument.usage
    printf "  %s\n" "LOG_TYPE"
    printf "    Type of logs to show (e.g., access, error, php_slow, php_error)\n"
    echo

  fi
}

# :command.usage
wpdocker_website_info_usage() {
  printf "wpdocker website info - Show site info\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website info DOMAIN\n"
  printf "  wpdocker website info --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to show info\n"
    echo

  fi
}

# :command.usage
wpdocker_website_restore_usage() {
  printf "wpdocker website restore - Restore site from backup\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website restore DOMAIN CODE_BACKUP_FILE DB_BACKUP_FILE\n"
  printf "  wpdocker website restore --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to restore\n"
    echo

    # :argument.usage
    printf "  %s\n" "CODE_BACKUP_FILE"
    printf "    Path to the backup file for the site\n"
    echo

    # :argument.usage
    printf "  %s\n" "DB_BACKUP_FILE"
    printf "    Path to the database backup file\n"
    echo

  fi
}

# :command.usage
wpdocker_website_update_template_usage() {
  printf "wpdocker website update_template - Update site template\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website update_template\n"
  printf "  wpdocker website update_template --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_usage() {
  printf "wpdocker ssl - SSL certificate management\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl COMMAND\n"
  printf "  wpdocker ssl [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install SSL certificate\n" "install"
  printf "  %s   Check SSL certificate status\n" "check  "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_install_usage() {
  printf "wpdocker ssl install - Install SSL certificate\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl install COMMAND\n"
  printf "  wpdocker ssl install [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install self-signed SSL certificate\n" "selfsigned "
  printf "  %s   Install Let's Encrypt SSL certificate\n" "letsencrypt"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_install_selfsigned_usage() {
  printf "wpdocker ssl install selfsigned - Install self-signed SSL certificate\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl install selfsigned DOMAIN\n"
  printf "  wpdocker ssl install selfsigned --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name for the self-signed SSL certificate\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_install_letsencrypt_usage() {
  printf "wpdocker ssl install letsencrypt - Install Let's Encrypt SSL certificate\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl install letsencrypt DOMAIN EMAIL [STAGING]\n"
  printf "  wpdocker ssl install letsencrypt --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name for the Let's Encrypt SSL certificate\n"
    echo

    # :argument.usage
    printf "  %s\n" "EMAIL"
    printf "    Email address for Let's Encrypt registration\n"
    echo

    # :argument.usage
    printf "  %s\n" "STAGING"
    printf "    Use staging environment for testing\n"
    printf "    %s\n" "Default: false"
    echo

  fi
}

# :command.usage
wpdocker_ssl_check_usage() {
  printf "wpdocker ssl check - Check SSL certificate status\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl check DOMAIN\n"
  printf "  wpdocker ssl check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name to check SSL certificate status\n"
    echo

  fi
}

# :command.usage
wpdocker_php_usage() {
  printf "wpdocker php - Manage PHP versions and configuration\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php COMMAND\n"
  printf "  wpdocker php [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Change PHP version for a site\n" "change "
  printf "  %s   Get PHP version list from Docker Hub\n" "get    "
  printf "  %s   Rebuild PHP container for a site\n" "rebuild"
  printf "  %s   Edit PHP configuration for a site\n" "edit   "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_change_usage() {
  printf "wpdocker php change - Change PHP version for a site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php change DOMAIN VERSION\n"
  printf "  wpdocker php change --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to change PHP version\n"
    echo

    # :argument.usage
    printf "  %s\n" "VERSION"
    printf "    New PHP version for the site\n"
    echo

  fi
}

# :command.usage
wpdocker_php_get_usage() {
  printf "wpdocker php get - Get PHP version list from Docker Hub\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php get\n"
  printf "  wpdocker php get --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_rebuild_usage() {
  printf "wpdocker php rebuild - Rebuild PHP container for a site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php rebuild DOMAIN\n"
  printf "  wpdocker php rebuild --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to rebuild PHP container\n"
    echo

  fi
}

# :command.usage
wpdocker_php_edit_usage() {
  printf "wpdocker php edit - Edit PHP configuration for a site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php edit CONFIG_TYPE\n"
  printf "  wpdocker php edit --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "CONFIG_TYPE"
    printf "    Type of PHP configuration to edit (conf, ini)\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_usage() {
  printf "wpdocker backup - Manage backups for WordPress sites\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup COMMAND\n"
  printf "  wpdocker backup [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Backup website source + DB\n" "website "
  printf "  %s   Backup database only\n" "database"
  printf "  %s   Backup file only\n" "file    "
  printf "  %s   Restore backup for a site\n" "restore "
  printf "  %s   List all backup files\n" "list    "
  printf "  %s   clean up backups older than x days\n" "cleanup "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_website_usage() {
  printf "wpdocker backup website - Backup website source + DB\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup website DOMAIN STORAGE [RCLONE_STORAGE]\n"
  printf "  wpdocker backup website --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain to be backed up\n"
    echo

    # :argument.usage
    printf "  %s\n" "STORAGE"
    printf "    The storage type that will store the backup (e.g. local, rclone)\n"
    echo

    # :argument.usage
    printf "  %s\n" "RCLONE_STORAGE"
    printf "    The storage name rclone will store this backup data, only declare if\n    STORAGE=rclone is declared\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_database_usage() {
  printf "wpdocker backup database - Backup database only\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup database DOMAIN [SAVE_LOCATION]\n"
  printf "  wpdocker backup database --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain will perform database backup\n"
    echo

    # :argument.usage
    printf "  %s\n" "SAVE_LOCATION"
    printf "    The full export file path of the backup data (e.g. /tmp/db_export.sql)\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_file_usage() {
  printf "wpdocker backup file - Backup file only\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup file DOMAIN\n"
  printf "  wpdocker backup file --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain will perform file backup\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_restore_usage() {
  printf "wpdocker backup restore - Restore backup for a site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup restore COMMAND\n"
  printf "  wpdocker backup restore [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Restore website source + DB\n" "website "
  printf "  %s   Restore database only\n" "database"
  printf "  %s   Restore file only\n" "file    "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_restore_website_usage() {
  printf "wpdocker backup restore website - Restore website source + DB\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup restore website DOMAIN CODE_BACKUP_FILE DB_BACKUP_FILE\n"
  printf "  wpdocker backup restore website --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    The domain will perform full data recovery (including source code and\n    database)\n"
    echo

    # :argument.usage
    printf "  %s\n" "CODE_BACKUP_FILE"
    printf "    The path to the backup file for the site\n"
    echo

    # :argument.usage
    printf "  %s\n" "DB_BACKUP_FILE"
    printf "    The path to the database backup file\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_restore_database_usage() {
  printf "wpdocker backup restore database - Restore database only\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup restore database DOMAIN DB_BACKUP_FILE\n"
  printf "  wpdocker backup restore database --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    The domain will perform database recovery\n"
    echo

    # :argument.usage
    printf "  %s\n" "DB_BACKUP_FILE"
    printf "    The path to the database backup file\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_restore_file_usage() {
  printf "wpdocker backup restore file - Restore file only\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup restore file DOMAIN CODE_BACKUP_FILE\n"
  printf "  wpdocker backup restore file --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    The domain will perform file recovery\n"
    echo

    # :argument.usage
    printf "  %s\n" "CODE_BACKUP_FILE"
    printf "    The path to the backup file for the site\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_list_usage() {
  printf "wpdocker backup list - List all backup files\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup list DOMAIN\n"
  printf "  wpdocker backup list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name to list backup files\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_cleanup_usage() {
  printf "wpdocker backup cleanup - clean up backups older than x days\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup cleanup DOMAIN MAX_AGE_DAYS\n"
  printf "  wpdocker backup cleanup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain needs to clean up its backup\n"
    echo

    # :argument.usage
    printf "  %s\n" "MAX_AGE_DAYS"
    printf "    Maximum number of days old of backup files allowed to be retained (e.g. 7\n    will delete files older than 7 days)\n"
    echo

  fi
}

# :command.usage
wpdocker_database_usage() {
  printf "wpdocker database - Manage database operations\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database COMMAND\n"
  printf "  wpdocker database [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Reset site database\n" "reset "
  printf "  %s   Import a SQL database\n" "import"
  printf "  %s   Export site database for a site or all sites\n" "export"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_reset_usage() {
  printf "wpdocker database reset - Reset site database\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database reset\n"
  printf "  wpdocker database reset --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_import_usage() {
  printf "wpdocker database import - Import a SQL database\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database import\n"
  printf "  wpdocker database import --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_export_usage() {
  printf "wpdocker database export - Export site database for a site or all sites\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database export COMMAND\n"
  printf "  wpdocker database export [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Export database for all sites\n" "all   "
  printf "  %s   Export database for a specific site\n" "single"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_export_all_usage() {
  printf "wpdocker database export all - Export database for all sites\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database export all\n"
  printf "  wpdocker database export all --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_export_single_usage() {
  printf "wpdocker database export single - Export database for a specific site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database export single DOMAIN\n"
  printf "  wpdocker database export single --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to export database\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_usage() {
  printf "wpdocker wp - WordPress tools\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp COMMAND\n"
  printf "  wpdocker wp [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run WP-CLI commands inside container\n" "cli     "
  printf "  %s   Migrate WordPress site\n" "migrate "
  printf "  %s   Reset features\n" "reset   "
  printf "  %s   Setup caching\n" "cache   "
  printf "  %s   Plugin tools\n" "plugin  "
  printf "  %s   Security enhancements\n" "security"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_cli_usage() {
  printf "wpdocker wp cli - Run WP-CLI commands inside container\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp cli DOMAIN COMMAND\n"
  printf "  wpdocker wp cli --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to run WP-CLI commands\n"
    echo

    # :argument.usage
    printf "  %s\n" "COMMAND"
    printf "    WP-CLI command to run\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_migrate_usage() {
  printf "wpdocker wp migrate - Migrate WordPress site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp migrate\n"
  printf "  wpdocker wp migrate --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_reset_usage() {
  printf "wpdocker wp reset - Reset features\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp reset COMMAND\n"
  printf "  wpdocker wp reset [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Reset admin password\n" "password"
  printf "  %s   Reset user roles\n" "role    "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_reset_password_usage() {
  printf "wpdocker wp reset password - Reset admin password\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp reset password DOMAIN [NEW_PASSWORD]\n"
  printf "  wpdocker wp reset password --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to reset password\n"
    echo

    # :argument.usage
    printf "  %s\n" "NEW_PASSWORD"
    printf "    New password for the admin user (optinal)\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_reset_role_usage() {
  printf "wpdocker wp reset role - Reset user roles\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp reset role DOMAIN [ROLE]\n"
  printf "  wpdocker wp reset role --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to reset user roles\n"
    echo

    # :argument.usage
    printf "  %s\n" "ROLE"
    printf "    New role for the user (optinal)\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_cache_usage() {
  printf "wpdocker wp cache - Setup caching\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp cache DOMAIN CACHE_TYPE\n"
  printf "  wpdocker wp cache --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to setup caching\n"
    echo

    # :argument.usage
    printf "  %s\n" "CACHE_TYPE"
    printf "    Type of caching to setup (wp-super-cache, fastcgi-cache, w3-total-cache,\n    wp-fastest-cache, no-cache)\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_plugin_usage() {
  printf "wpdocker wp plugin - Plugin tools\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp plugin COMMAND\n"
  printf "  wpdocker wp plugin [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Enable plugin auto update\n" "auto-update"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_plugin_auto_update_usage() {
  printf "wpdocker wp plugin auto-update - Enable plugin auto update\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp plugin auto-update DOMAIN\n"
  printf "  wpdocker wp plugin auto-update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to enable plugin auto update\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_security_usage() {
  printf "wpdocker wp security - Security enhancements\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp security COMMAND\n"
  printf "  wpdocker wp security [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Protect wp-login.php for a site\n" "login"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wp_security_login_usage() {
  printf "wpdocker wp security login - Protect wp-login.php for a site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wp security login DOMAIN\n"
  printf "  wpdocker wp security login --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name of the site to protect wp-login.php\n"
    echo

  fi
}

# :command.usage
wpdocker_system_usage() {
  printf "wpdocker system - System operations\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system COMMAND\n"
  printf "  wpdocker system [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Sytem checking utilities\n" "check  "
  printf "  %s   Manage Docker containers\n" "manage "
  printf "  %s   Cleanup unused Docker resources\n" "cleanup"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_check_usage() {
  printf "wpdocker system check - Sytem checking utilities\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system check COMMAND\n"
  printf "  wpdocker system check [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Check system resources of Docker\n" "resources"
  printf "  %s   Check disk space usage of WP Docker\n" "disk     "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_check_resources_usage() {
  printf "wpdocker system check resources - Check system resources of Docker\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system check resources\n"
  printf "  wpdocker system check resources --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_check_disk_usage() {
  printf "wpdocker system check disk - Check disk space usage of WP Docker\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system check disk\n"
  printf "  wpdocker system check disk --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_manage_usage() {
  printf "wpdocker system manage - Manage Docker containers\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system manage CONTAINER_NAME ACTION\n"
  printf "  wpdocker system manage --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "CONTAINER_NAME"
    printf "    Name of the Docker container to manage\n"
    echo

    # :argument.usage
    printf "  %s\n" "ACTION"
    printf "    Action to perform on Docker containers (start, stop, restart, remove)\n"
    echo

  fi
}

# :command.usage
wpdocker_system_cleanup_usage() {
  printf "wpdocker system cleanup - Cleanup unused Docker resources\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system cleanup\n"
  printf "  wpdocker system cleanup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_cron_usage() {
  printf "wpdocker cron - Run cron tasks\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker cron COMMAND\n"
  printf "  wpdocker cron [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run a specific cron task\n" "run"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_cron_run_usage() {
  printf "wpdocker cron run - Run a specific cron task\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker cron run TASK\n"
  printf "  wpdocker cron run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TASK"
    printf "    Name of the cron task to run (backup, letsencrypt_renew, php_get_version,\n    all)\n"
    echo

  fi
}

# :command.usage
wpdocker_core_usage() {
  printf "wpdocker core - Core management\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core COMMAND\n"
  printf "  wpdocker core [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Show current and latest version\n" "version  "
  printf "  %s   Update core system to the latest version\n" "update   "
  printf "  %s   Run the upgrade scripts\n" "upgrade  "
  printf "  %s   Uninstall WP Docker\n" "uninstall"
  printf "  %s   Update channel options\n" "channel  "
  printf "  %s   Language options\n" "lang     "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_version_usage() {
  printf "wpdocker core version - Show current and latest version\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core version\n"
  printf "  wpdocker core version --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_update_usage() {
  printf "wpdocker core update - Update core system to the latest version\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core update\n"
  printf "  wpdocker core update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_upgrade_usage() {
  printf "wpdocker core upgrade - Run the upgrade scripts\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core upgrade\n"
  printf "  wpdocker core upgrade --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_uninstall_usage() {
  printf "wpdocker core uninstall - Uninstall WP Docker\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core uninstall\n"
  printf "  wpdocker core uninstall --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_channel_usage() {
  printf "wpdocker core channel - Update channel options\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core channel COMMAND\n"
  printf "  wpdocker core channel [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Change release channel\n" "change"
  printf "  %s   Show current channel\n" "check "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_channel_change_usage() {
  printf "wpdocker core channel change - Change release channel\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core channel change CHANNEL\n"
  printf "  wpdocker core channel change --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "CHANNEL"
    printf "    Release channel to switch to (official, nightly, dev)\n"
    echo

  fi
}

# :command.usage
wpdocker_core_channel_check_usage() {
  printf "wpdocker core channel check - Show current channel\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core channel check\n"
  printf "  wpdocker core channel check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_lang_usage() {
  printf "wpdocker core lang - Language options\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core lang COMMAND\n"
  printf "  wpdocker core lang [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Change CLI language\n" "change"
  printf "  %s   Show current language\n" "check "
  printf "  %s   List supported languages\n" "list  "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_lang_change_usage() {
  printf "wpdocker core lang change - Change CLI language\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core lang change LANG\n"
  printf "  wpdocker core lang change --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "LANG"
    printf "    Language code to switch to (e.g., en, fr, de)\n"
    echo

  fi
}

# :command.usage
wpdocker_core_lang_check_usage() {
  printf "wpdocker core lang check - Show current language\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core lang check\n"
  printf "  wpdocker core lang check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_lang_list_usage() {
  printf "wpdocker core lang list - List supported languages\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core lang list\n"
  printf "  wpdocker core lang list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_nginx_usage() {
  printf "wpdocker nginx - NGINX actions\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker nginx COMMAND\n"
  printf "  wpdocker nginx [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Rebuild NGINX proxy\n" "rebuild"
  printf "  %s   Restart NGINX proxy\n" "restart"
  printf "  %s   Reload NGINX configuration\n" "reload "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_nginx_rebuild_usage() {
  printf "wpdocker nginx rebuild - Rebuild NGINX proxy\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker nginx rebuild\n"
  printf "  wpdocker nginx rebuild --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_nginx_restart_usage() {
  printf "wpdocker nginx restart - Restart NGINX proxy\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker nginx restart\n"
  printf "  wpdocker nginx restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_nginx_reload_usage() {
  printf "wpdocker nginx reload - Reload NGINX configuration\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker nginx reload\n"
  printf "  wpdocker nginx reload --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_usage() {
  printf "wpdocker rclone - Rclone operations\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone COMMAND\n"
  printf "  wpdocker rclone [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Rclone configuration\n" "config"
  printf "  %s   Upload files to remote storage\n" "upload"
  printf "  %s   delete storage config\n" "delete"
  printf "  %s   List storage in config\n" "list  "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_config_usage() {
  printf "wpdocker rclone config - Rclone configuration\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone config\n"
  printf "  wpdocker rclone config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_upload_usage() {
  printf "wpdocker rclone upload - Upload files to remote storage\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone upload COMMAND\n"
  printf "  wpdocker rclone upload [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Upload backup files\n" "backup"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_upload_backup_usage() {
  printf "wpdocker rclone upload backup - Upload backup files\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone upload backup\n"
  printf "  wpdocker rclone upload backup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_delete_usage() {
  printf "wpdocker rclone delete - delete storage config\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone delete\n"
  printf "  wpdocker rclone delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_list_usage() {
  printf "wpdocker rclone list - List storage in config\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone list\n"
  printf "  wpdocker rclone list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_debug_usage() {
  printf "wpdocker debug - Debugging tools\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker debug COMMAND\n"
  printf "  wpdocker debug [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Enable and disable debug mode\n" "mode"
  printf "  %s   Show debug logs\n" "logs"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_debug_mode_usage() {
  printf "wpdocker debug mode - Enable and disable debug mode\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker debug mode\n"
  printf "  wpdocker debug mode --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_debug_logs_usage() {
  printf "wpdocker debug logs - Show debug logs\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker debug logs\n"
  printf "  wpdocker debug logs --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
wpdocker_menu_command() {

  # src/menu_command.sh
  _is_file_exist "$BASE_DIR/main.sh" || return 1

  source "$BASE_DIR/main.sh"
}

# :command.function
wpdocker_website_create_command() {

  # src/website_create_command.sh
  safe_source "$CLI_DIR/website_create.sh"

  # =====================================
  # 🏗 website_create_command – Create a new website with WordPress
  # ======================================
  domain=${args[domain]}
  php_version=${args[php]}
  auto_generate=${args[auto_generate]}

  website_cli_create --domain="$domain" \
      --php="$php_version" \
      --auto_generate="$auto_generate" || exit 1

}

# :command.function
wpdocker_website_delete_command() {

  # src/website_delete_command.sh
  safe_source "$CLI_DIR/website_manage.sh"

  website_cli_delete --domain="${args[domain]}" \
      --backup_enabled="${args[backup]}" || exit 1
}

# :command.function
wpdocker_website_list_command() {

  # src/website_list_command.sh
  safe_source "$CLI_DIR/website_manage.sh"

  website_cli_list
}

# :command.function
wpdocker_website_restart_command() {

  # src/website_restart_command.sh
  echo "# This file is located at 'src/website_restart_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website restart' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_restart_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_website_logs_command() {

  # src/website_logs_command.sh
  safe_source "$CLI_DIR/website_manage.sh"

  website_cli_logs --domain="${args[domain]}" --log_type="${args[log_type]}" || exit 1
}

# :command.function
wpdocker_website_info_command() {

  # src/website_info_command.sh
  safe_source "$CLI_DIR/website_manage.sh"

  website_cli_info --domain="${args[domain]}" || exit 1
}

# :command.function
wpdocker_website_restore_command() {

  # src/website_restore_command.sh
  safe_source "$CLI_DIR/backup_restore.sh"

  backup_cli_restore_web --domain="${args[domain]}" \
      --code_backup_file="${args[code_backup_file]}" \
      --db_backup_file="${args[db_backup_file]}" \
      --test_mode="${args[test_mode]}" || exit 1

}

# :command.function
wpdocker_website_update_template_command() {

  # src/website_update_template_command.sh
  echo "# This file is located at 'src/website_update_template_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website update_template' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_update_template_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_ssl_install_selfsigned_command() {

  # src/ssl_install_selfsigned_command.sh
  safe_source "$CLI_DIR/ssl_install.sh"

  ssl_cli_install_selfsigned --domain="${args[domain]}"

}

# :command.function
wpdocker_ssl_install_letsencrypt_command() {

  # src/ssl_install_letsencrypt_command.sh
  safe_source "$CLI_DIR/ssl_install.sh"

  ssl_cli_install_letsencrypt --domain="${args[domain]}" \
                              --email="${args[email]}" \
                              --staging="${args[staging]}"
}

# :command.function
wpdocker_ssl_check_command() {

  # src/ssl_check_command.sh
  safe_source "$CLI_DIR/ssl_check_status.sh"

  ssl_cli_check_status --domain="${args[domain]}" || exit 1
}

# :command.function
wpdocker_php_change_command() {

  # src/php_change_command.sh
  safe_source "$CLI_DIR/php_version.sh"

  php_cli_change_version --domain="${args[domain]}" --php_version="${args[version]}" || exit 1
}

# :command.function
wpdocker_php_get_command() {

  # src/php_get_command.sh
  safe_source "$FUNCTIONS_DIR/php/php_get_version.sh"

  php_get_version
}

# :command.function
wpdocker_php_rebuild_command() {

  # src/php_rebuild_command.sh
  echo "# This file is located at 'src/php_rebuild_command.sh'."
  echo "# It contains the implementation for the 'wpdocker php rebuild' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_php_rebuild_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_php_edit_command() {

  # src/php_edit_command.sh
  safe_source "$FUNCTIONS_DIR/php_loader.sh"

  # Check if ${args[config_type]} is "conf" or "ini"
  if [[ "${args[config_type]}" == "conf" ]]; then
      # If it's "conf", use edit_php_fpm_conf
      edit_php_fpm_conf || exit 1
  elif [[ "${args[config_type]}" == "ini" ]]; then
      edit_php_ini || exit 1
  else
      # If it's neither, print an error message
      print_msg error "Invalid config type: ${args[config_type]}. Use 'conf' or 'ini'."
      exit 1
  fi
}

# :command.function
wpdocker_backup_website_command() {

  # src/backup_website_command.sh
  safe_source "$CLI_DIR/backup_website.sh"

  backup_cli_backup_web --domain="${args[domain]}" --storage="${args[storage]}" --rclone_storage="${args[rclone_storage]}"
}

# :command.function
wpdocker_backup_database_command() {

  # src/backup_database_command.sh
  safe_source "$CLI_DIR/database_actions.sh"

  database_cli_export --domain="${args[domain]}" --save_location="${args[save_location]}"
}

# :command.function
wpdocker_backup_file_command() {

  # src/backup_file_command.sh
  safe_source "$CLI_DIR/backup_website.sh"

  backup_cli_file --domain="${args[domain]}"

}

# :command.function
wpdocker_backup_restore_website_command() {

  # src/backup_restore_website_command.sh
  safe_source "$CLI_DIR/backup_restore.sh"

  backup_cli_restore_web \
      --domain="${args[domain]}" \
      --code_backup_file="${args[code_backup_file]}" \
      --db_backup_file="${args[db_backup_file]}" \
      --test_mode="${args[test_mode]}"

}

# :command.function
wpdocker_backup_restore_database_command() {

  # src/backup_restore_database_command.sh
  safe_source "$FUNCTIONS_DIR/backup/backup_restore_functions.sh"

  backup_restore_database "${args[db_backup_file]}" "${args[domain]}" || exit 1
}

# :command.function
wpdocker_backup_restore_file_command() {

  # src/backup_restore_file_command.sh
  safe_source "$FUNCTIONS_DIR/backup/backup_restore_functions.sh"

  backup_restore_files "${args[code_backup_file]}" "$SITES_DIR/${args[domain]}"
}

# :command.function
wpdocker_backup_list_command() {

  # src/backup_list_command.sh
  safe_source "$CLI_DIR/backup_manage.sh"

  backup_cli_manage --domain="${args[domain]}" --action=list || exit 1
}

# :command.function
wpdocker_backup_cleanup_command() {

  # src/backup_cleanup_command.sh
  safe_source "$FUNCTIONS_DIR/backup/backup_manage.sh"

  backup_logic_manage "${args[domain]}" clean "${args[max_age_days]}" || exit 1
}

# :command.function
wpdocker_database_reset_command() {

  # src/database_reset_command.sh
  echo "# This file is located at 'src/database_reset_command.sh'."
  echo "# It contains the implementation for the 'wpdocker database reset' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_database_reset_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_database_import_command() {

  # src/database_import_command.sh
  echo "# This file is located at 'src/database_import_command.sh'."
  echo "# It contains the implementation for the 'wpdocker database import' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_database_import_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_database_export_all_command() {

  # src/database_export_all_command.sh
  echo "# This file is located at 'src/database_export_all_command.sh'."
  echo "# It contains the implementation for the 'wpdocker database export all' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_database_export_all_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_database_export_single_command() {

  # src/database_export_single_command.sh
  echo "# This file is located at 'src/database_export_single_command.sh'."
  echo "# It contains the implementation for the 'wpdocker database export single' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_database_export_single_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wp_cli_command() {

  # src/wp_cli_command.sh
  echo "# This file is located at 'src/wp_cli_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wp cli' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wp_cli_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wp_migrate_command() {

  # src/wp_migrate_command.sh
  echo "# This file is located at 'src/wp_migrate_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wp migrate' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wp_migrate_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wp_reset_password_command() {

  # src/wp_reset_password_command.sh
  echo "# This file is located at 'src/wp_reset_password_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wp reset password' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wp_reset_password_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wp_reset_role_command() {

  # src/wp_reset_role_command.sh
  echo "# This file is located at 'src/wp_reset_role_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wp reset role' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wp_reset_role_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wp_cache_command() {

  # src/wp_cache_command.sh
  echo "# This file is located at 'src/wp_cache_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wp cache' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wp_cache_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wp_plugin_auto_update_command() {

  # src/wp_plugin_auto_update_command.sh
  echo "# This file is located at 'src/wp_plugin_auto_update_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wp plugin auto-update' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wp_plugin_auto_update_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wp_security_login_command() {

  # src/wp_security_login_command.sh
  echo "# This file is located at 'src/wp_security_login_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wp security login' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wp_security_login_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_system_check_resources_command() {

  # src/system_check_resources_command.sh
  echo "# This file is located at 'src/system_check_resources_command.sh'."
  echo "# It contains the implementation for the 'wpdocker system check resources' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_system_check_resources_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_system_check_disk_command() {

  # src/system_check_disk_command.sh
  echo "# This file is located at 'src/system_check_disk_command.sh'."
  echo "# It contains the implementation for the 'wpdocker system check disk' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_system_check_disk_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_system_manage_command() {

  # src/system_manage_command.sh
  echo "# This file is located at 'src/system_manage_command.sh'."
  echo "# It contains the implementation for the 'wpdocker system manage' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_system_manage_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_system_cleanup_command() {

  # src/system_cleanup_command.sh
  echo "# This file is located at 'src/system_cleanup_command.sh'."
  echo "# It contains the implementation for the 'wpdocker system cleanup' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_system_cleanup_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_cron_run_command() {

  # src/cron_run_command.sh
  echo "# This file is located at 'src/cron_run_command.sh'."
  echo "# It contains the implementation for the 'wpdocker cron run' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_cron_run_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_version_command() {

  # src/core_version_command.sh
  echo "# This file is located at 'src/core_version_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core version' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_version_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_update_command() {

  # src/core_update_command.sh
  echo "# This file is located at 'src/core_update_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core update' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_update_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_upgrade_command() {

  # src/core_upgrade_command.sh
  echo "# This file is located at 'src/core_upgrade_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core upgrade' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_upgrade_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_uninstall_command() {

  # src/core_uninstall_command.sh
  echo "# This file is located at 'src/core_uninstall_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core uninstall' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_uninstall_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_channel_change_command() {

  # src/core_channel_change_command.sh
  echo "# This file is located at 'src/core_channel_change_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core channel change' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_channel_change_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_channel_check_command() {

  # src/core_channel_check_command.sh
  echo "# This file is located at 'src/core_channel_check_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core channel check' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_channel_check_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_lang_change_command() {

  # src/core_lang_change_command.sh
  echo "# This file is located at 'src/core_lang_change_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core lang change' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_lang_change_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_lang_check_command() {

  # src/core_lang_check_command.sh
  echo "# This file is located at 'src/core_lang_check_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core lang check' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_lang_check_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_lang_list_command() {

  # src/core_lang_list_command.sh
  echo "# This file is located at 'src/core_lang_list_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core lang list' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_lang_list_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_nginx_rebuild_command() {

  # src/nginx_rebuild_command.sh
  echo "# This file is located at 'src/nginx_rebuild_command.sh'."
  echo "# It contains the implementation for the 'wpdocker nginx rebuild' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_nginx_rebuild_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_nginx_restart_command() {

  # src/nginx_restart_command.sh
  echo "# This file is located at 'src/nginx_restart_command.sh'."
  echo "# It contains the implementation for the 'wpdocker nginx restart' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_nginx_restart_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_nginx_reload_command() {

  # src/nginx_reload_command.sh
  echo "# This file is located at 'src/nginx_reload_command.sh'."
  echo "# It contains the implementation for the 'wpdocker nginx reload' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_nginx_reload_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_rclone_config_command() {

  # src/rclone_config_command.sh
  echo "# This file is located at 'src/rclone_config_command.sh'."
  echo "# It contains the implementation for the 'wpdocker rclone config' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_rclone_config_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_rclone_upload_backup_command() {

  # src/rclone_upload_backup_command.sh
  echo "# This file is located at 'src/rclone_upload_backup_command.sh'."
  echo "# It contains the implementation for the 'wpdocker rclone upload backup' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_rclone_upload_backup_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_rclone_delete_command() {

  # src/rclone_delete_command.sh
  echo "# This file is located at 'src/rclone_delete_command.sh'."
  echo "# It contains the implementation for the 'wpdocker rclone delete' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_rclone_delete_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_rclone_list_command() {

  # src/rclone_list_command.sh
  echo "# This file is located at 'src/rclone_list_command.sh'."
  echo "# It contains the implementation for the 'wpdocker rclone list' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_rclone_list_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_debug_mode_command() {

  # src/debug_mode_command.sh
  echo "# This file is located at 'src/debug_mode_command.sh'."
  echo "# It contains the implementation for the 'wpdocker debug mode' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_debug_mode_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_debug_logs_command() {

  # src/debug_logs_command.sh
  echo "# This file is located at 'src/debug_logs_command.sh'."
  echo "# It contains the implementation for the 'wpdocker debug logs' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_debug_logs_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        wpdocker_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    menu)
      action="menu"
      shift
      wpdocker_menu_parse_requirements "$@"
      shift $#
      ;;

    website)
      action="website"
      shift
      wpdocker_website_parse_requirements "$@"
      shift $#
      ;;

    ssl)
      action="ssl"
      shift
      wpdocker_ssl_parse_requirements "$@"
      shift $#
      ;;

    php)
      action="php"
      shift
      wpdocker_php_parse_requirements "$@"
      shift $#
      ;;

    backup)
      action="backup"
      shift
      wpdocker_backup_parse_requirements "$@"
      shift $#
      ;;

    database)
      action="database"
      shift
      wpdocker_database_parse_requirements "$@"
      shift $#
      ;;

    wp)
      action="wp"
      shift
      wpdocker_wp_parse_requirements "$@"
      shift $#
      ;;

    system)
      action="system"
      shift
      wpdocker_system_parse_requirements "$@"
      shift $#
      ;;

    cron)
      action="cron"
      shift
      wpdocker_cron_parse_requirements "$@"
      shift $#
      ;;

    core)
      action="core"
      shift
      wpdocker_core_parse_requirements "$@"
      shift $#
      ;;

    nginx)
      action="nginx"
      shift
      wpdocker_nginx_parse_requirements "$@"
      shift $#
      ;;

    rclone)
      action="rclone"
      shift
      wpdocker_rclone_parse_requirements "$@"
      shift $#
      ;;

    debug)
      action="debug"
      shift
      wpdocker_debug_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_menu_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_menu_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="menu"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    create)
      action="create"
      shift
      wpdocker_website_create_parse_requirements "$@"
      shift $#
      ;;

    delete)
      action="delete"
      shift
      wpdocker_website_delete_parse_requirements "$@"
      shift $#
      ;;

    list)
      action="list"
      shift
      wpdocker_website_list_parse_requirements "$@"
      shift $#
      ;;

    restart)
      action="restart"
      shift
      wpdocker_website_restart_parse_requirements "$@"
      shift $#
      ;;

    logs)
      action="logs"
      shift
      wpdocker_website_logs_parse_requirements "$@"
      shift $#
      ;;

    info)
      action="info"
      shift
      wpdocker_website_info_parse_requirements "$@"
      shift $#
      ;;

    restore)
      action="restore"
      shift
      wpdocker_website_restore_parse_requirements "$@"
      shift $#
      ;;

    update_template)
      action="update_template"
      shift
      wpdocker_website_update_template_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_website_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_create_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website create"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['php']+x} ]]; then
          args['php']=$1
          shift
        # :argument.case
        elif [[ -z ${args['auto_generate']+x} ]]; then
          args['auto_generate']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker website create DOMAIN PHP [AUTO_GENERATE]\n" >&2

    exit 1
  fi

  if [[ -z ${args['php']+x} ]]; then
    printf "missing required argument: PHP\nusage: wpdocker website create DOMAIN PHP [AUTO_GENERATE]\n" >&2

    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['auto_generate']:-} ]] || args['auto_generate']="true"

}

# :command.parse_requirements
wpdocker_website_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['backup']+x} ]]; then
          args['backup']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker website delete DOMAIN [BACKUP]\n" >&2

    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['backup']:-} ]] || args['backup']="true"

}

# :command.parse_requirements
wpdocker_website_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker website restart DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_website_logs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_logs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website logs"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['log_type']+x} ]]; then
          args['log_type']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker website logs DOMAIN LOG_TYPE\n" >&2

    exit 1
  fi

  if [[ -z ${args['log_type']+x} ]]; then
    printf "missing required argument: LOG_TYPE\nusage: wpdocker website logs DOMAIN LOG_TYPE\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_website_info_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_info_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website info"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker website info DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_website_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website restore"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['code_backup_file']+x} ]]; then
          args['code_backup_file']=$1
          shift
        # :argument.case
        elif [[ -z ${args['db_backup_file']+x} ]]; then
          args['db_backup_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker website restore DOMAIN CODE_BACKUP_FILE DB_BACKUP_FILE\n" >&2

    exit 1
  fi

  if [[ -z ${args['code_backup_file']+x} ]]; then
    printf "missing required argument: CODE_BACKUP_FILE\nusage: wpdocker website restore DOMAIN CODE_BACKUP_FILE DB_BACKUP_FILE\n" >&2

    exit 1
  fi

  if [[ -z ${args['db_backup_file']+x} ]]; then
    printf "missing required argument: DB_BACKUP_FILE\nusage: wpdocker website restore DOMAIN CODE_BACKUP_FILE DB_BACKUP_FILE\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_website_update_template_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_update_template_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website update_template"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_ssl_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install)
      action="install"
      shift
      wpdocker_ssl_install_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      wpdocker_ssl_check_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_ssl_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_ssl_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    selfsigned)
      action="selfsigned"
      shift
      wpdocker_ssl_install_selfsigned_parse_requirements "$@"
      shift $#
      ;;

    letsencrypt)
      action="letsencrypt"
      shift
      wpdocker_ssl_install_letsencrypt_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_ssl_install_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_ssl_install_selfsigned_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_install_selfsigned_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ssl install selfsigned"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker ssl install selfsigned DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_ssl_install_letsencrypt_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_install_letsencrypt_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ssl install letsencrypt"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['email']+x} ]]; then
          args['email']=$1
          shift
        # :argument.case
        elif [[ -z ${args['staging']+x} ]]; then
          args['staging']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker ssl install letsencrypt DOMAIN EMAIL [STAGING]\n" >&2

    exit 1
  fi

  if [[ -z ${args['email']+x} ]]; then
    printf "missing required argument: EMAIL\nusage: wpdocker ssl install letsencrypt DOMAIN EMAIL [STAGING]\n" >&2

    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['staging']:-} ]] || args['staging']="false"

}

# :command.parse_requirements
wpdocker_ssl_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ssl check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker ssl check DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_php_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    change)
      action="change"
      shift
      wpdocker_php_change_parse_requirements "$@"
      shift $#
      ;;

    get)
      action="get"
      shift
      wpdocker_php_get_parse_requirements "$@"
      shift $#
      ;;

    rebuild)
      action="rebuild"
      shift
      wpdocker_php_rebuild_parse_requirements "$@"
      shift $#
      ;;

    edit)
      action="edit"
      shift
      wpdocker_php_edit_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_php_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_change_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_change_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php change"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['version']+x} ]]; then
          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker php change DOMAIN VERSION\n" >&2

    exit 1
  fi

  if [[ -z ${args['version']+x} ]]; then
    printf "missing required argument: VERSION\nusage: wpdocker php change DOMAIN VERSION\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_php_get_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php get"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_rebuild_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_rebuild_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php rebuild"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker php rebuild DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_php_edit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php edit"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['config_type']+x} ]]; then
          args['config_type']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['config_type']+x} ]]; then
    printf "missing required argument: CONFIG_TYPE\nusage: wpdocker php edit CONFIG_TYPE\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_backup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    website)
      action="website"
      shift
      wpdocker_backup_website_parse_requirements "$@"
      shift $#
      ;;

    database)
      action="database"
      shift
      wpdocker_backup_database_parse_requirements "$@"
      shift $#
      ;;

    file)
      action="file"
      shift
      wpdocker_backup_file_parse_requirements "$@"
      shift $#
      ;;

    restore)
      action="restore"
      shift
      wpdocker_backup_restore_parse_requirements "$@"
      shift $#
      ;;

    list)
      action="list"
      shift
      wpdocker_backup_list_parse_requirements "$@"
      shift $#
      ;;

    cleanup)
      action="cleanup"
      shift
      wpdocker_backup_cleanup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_backup_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_website_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_website_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup website"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['storage']+x} ]]; then
          args['storage']=$1
          shift
        # :argument.case
        elif [[ -z ${args['rclone_storage']+x} ]]; then
          args['rclone_storage']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker backup website DOMAIN STORAGE [RCLONE_STORAGE]\n" >&2

    exit 1
  fi

  if [[ -z ${args['storage']+x} ]]; then
    printf "missing required argument: STORAGE\nusage: wpdocker backup website DOMAIN STORAGE [RCLONE_STORAGE]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_backup_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup database"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['save_location']+x} ]]; then
          args['save_location']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker backup database DOMAIN [SAVE_LOCATION]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_backup_file_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_file_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup file"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker backup file DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_backup_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    website)
      action="website"
      shift
      wpdocker_backup_restore_website_parse_requirements "$@"
      shift $#
      ;;

    database)
      action="database"
      shift
      wpdocker_backup_restore_database_parse_requirements "$@"
      shift $#
      ;;

    file)
      action="file"
      shift
      wpdocker_backup_restore_file_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_backup_restore_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_restore_website_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_restore_website_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup restore website"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['code_backup_file']+x} ]]; then
          args['code_backup_file']=$1
          shift
        # :argument.case
        elif [[ -z ${args['db_backup_file']+x} ]]; then
          args['db_backup_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker backup restore website DOMAIN CODE_BACKUP_FILE DB_BACKUP_FILE\n" >&2

    exit 1
  fi

  if [[ -z ${args['code_backup_file']+x} ]]; then
    printf "missing required argument: CODE_BACKUP_FILE\nusage: wpdocker backup restore website DOMAIN CODE_BACKUP_FILE DB_BACKUP_FILE\n" >&2

    exit 1
  fi

  if [[ -z ${args['db_backup_file']+x} ]]; then
    printf "missing required argument: DB_BACKUP_FILE\nusage: wpdocker backup restore website DOMAIN CODE_BACKUP_FILE DB_BACKUP_FILE\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_backup_restore_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_restore_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup restore database"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['db_backup_file']+x} ]]; then
          args['db_backup_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker backup restore database DOMAIN DB_BACKUP_FILE\n" >&2

    exit 1
  fi

  if [[ -z ${args['db_backup_file']+x} ]]; then
    printf "missing required argument: DB_BACKUP_FILE\nusage: wpdocker backup restore database DOMAIN DB_BACKUP_FILE\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_backup_restore_file_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_restore_file_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup restore file"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['code_backup_file']+x} ]]; then
          args['code_backup_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker backup restore file DOMAIN CODE_BACKUP_FILE\n" >&2

    exit 1
  fi

  if [[ -z ${args['code_backup_file']+x} ]]; then
    printf "missing required argument: CODE_BACKUP_FILE\nusage: wpdocker backup restore file DOMAIN CODE_BACKUP_FILE\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_backup_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker backup list DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_backup_cleanup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_cleanup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup cleanup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['max_age_days']+x} ]]; then
          args['max_age_days']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker backup cleanup DOMAIN MAX_AGE_DAYS\n" >&2

    exit 1
  fi

  if [[ -z ${args['max_age_days']+x} ]]; then
    printf "missing required argument: MAX_AGE_DAYS\nusage: wpdocker backup cleanup DOMAIN MAX_AGE_DAYS\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    reset)
      action="reset"
      shift
      wpdocker_database_reset_parse_requirements "$@"
      shift $#
      ;;

    import)
      action="import"
      shift
      wpdocker_database_import_parse_requirements "$@"
      shift $#
      ;;

    export)
      action="export"
      shift
      wpdocker_database_export_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_database_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_reset_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_reset_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database reset"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_import_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_import_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database import"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_export_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_export_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    all)
      action="all"
      shift
      wpdocker_database_export_all_parse_requirements "$@"
      shift $#
      ;;

    single)
      action="single"
      shift
      wpdocker_database_export_single_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_database_export_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_export_all_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_export_all_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database export all"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_export_single_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_export_single_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database export single"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker database export single DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_wp_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    cli)
      action="cli"
      shift
      wpdocker_wp_cli_parse_requirements "$@"
      shift $#
      ;;

    migrate)
      action="migrate"
      shift
      wpdocker_wp_migrate_parse_requirements "$@"
      shift $#
      ;;

    reset)
      action="reset"
      shift
      wpdocker_wp_reset_parse_requirements "$@"
      shift $#
      ;;

    cache)
      action="cache"
      shift
      wpdocker_wp_cache_parse_requirements "$@"
      shift $#
      ;;

    plugin)
      action="plugin"
      shift
      wpdocker_wp_plugin_parse_requirements "$@"
      shift $#
      ;;

    security)
      action="security"
      shift
      wpdocker_wp_security_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_wp_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wp_cli_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_cli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wp cli"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker wp cli DOMAIN COMMAND\n" >&2

    exit 1
  fi

  if [[ -z ${args['command']+x} ]]; then
    printf "missing required argument: COMMAND\nusage: wpdocker wp cli DOMAIN COMMAND\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_wp_migrate_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_migrate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wp migrate"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wp_reset_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_reset_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    password)
      action="password"
      shift
      wpdocker_wp_reset_password_parse_requirements "$@"
      shift $#
      ;;

    role)
      action="role"
      shift
      wpdocker_wp_reset_role_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_wp_reset_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wp_reset_password_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_reset_password_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wp reset password"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['new_password']+x} ]]; then
          args['new_password']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker wp reset password DOMAIN [NEW_PASSWORD]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_wp_reset_role_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_reset_role_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wp reset role"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['role']+x} ]]; then
          args['role']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker wp reset role DOMAIN [ROLE]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_wp_cache_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_cache_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wp cache"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['cache_type']+x} ]]; then
          args['cache_type']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker wp cache DOMAIN CACHE_TYPE\n" >&2

    exit 1
  fi

  if [[ -z ${args['cache_type']+x} ]]; then
    printf "missing required argument: CACHE_TYPE\nusage: wpdocker wp cache DOMAIN CACHE_TYPE\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_wp_plugin_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_plugin_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    auto-update)
      action="auto-update"
      shift
      wpdocker_wp_plugin_auto_update_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_wp_plugin_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wp_plugin_auto_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_plugin_auto_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wp plugin auto-update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker wp plugin auto-update DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_wp_security_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_security_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    login)
      action="login"
      shift
      wpdocker_wp_security_login_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_wp_security_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wp_security_login_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wp_security_login_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wp security login"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker wp security login DOMAIN\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_system_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    check)
      action="check"
      shift
      wpdocker_system_check_parse_requirements "$@"
      shift $#
      ;;

    manage)
      action="manage"
      shift
      wpdocker_system_manage_parse_requirements "$@"
      shift $#
      ;;

    cleanup)
      action="cleanup"
      shift
      wpdocker_system_cleanup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_system_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    resources)
      action="resources"
      shift
      wpdocker_system_check_resources_parse_requirements "$@"
      shift $#
      ;;

    disk)
      action="disk"
      shift
      wpdocker_system_check_disk_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_system_check_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_check_resources_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_check_resources_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system check resources"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_check_disk_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_check_disk_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system check disk"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_manage_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_manage_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system manage"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['container_name']+x} ]]; then
          args['container_name']=$1
          shift
        # :argument.case
        elif [[ -z ${args['action']+x} ]]; then
          args['action']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['container_name']+x} ]]; then
    printf "missing required argument: CONTAINER_NAME\nusage: wpdocker system manage CONTAINER_NAME ACTION\n" >&2

    exit 1
  fi

  if [[ -z ${args['action']+x} ]]; then
    printf "missing required argument: ACTION\nusage: wpdocker system manage CONTAINER_NAME ACTION\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_system_cleanup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_cleanup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system cleanup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_cron_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_cron_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    run)
      action="run"
      shift
      wpdocker_cron_run_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_cron_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_cron_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_cron_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="cron run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['task']+x} ]]; then
          args['task']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['task']+x} ]]; then
    printf "missing required argument: TASK\nusage: wpdocker cron run TASK\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_core_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    version)
      action="version"
      shift
      wpdocker_core_version_parse_requirements "$@"
      shift $#
      ;;

    update)
      action="update"
      shift
      wpdocker_core_update_parse_requirements "$@"
      shift $#
      ;;

    upgrade)
      action="upgrade"
      shift
      wpdocker_core_upgrade_parse_requirements "$@"
      shift $#
      ;;

    uninstall)
      action="uninstall"
      shift
      wpdocker_core_uninstall_parse_requirements "$@"
      shift $#
      ;;

    channel)
      action="channel"
      shift
      wpdocker_core_channel_parse_requirements "$@"
      shift $#
      ;;

    lang)
      action="lang"
      shift
      wpdocker_core_lang_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_core_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_version_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_version_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core version"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_upgrade_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_upgrade_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core upgrade"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_uninstall_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core uninstall"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_channel_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_channel_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    change)
      action="change"
      shift
      wpdocker_core_channel_change_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      wpdocker_core_channel_check_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_core_channel_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_channel_change_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_channel_change_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core channel change"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['channel']+x} ]]; then
          args['channel']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['channel']+x} ]]; then
    printf "missing required argument: CHANNEL\nusage: wpdocker core channel change CHANNEL\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_core_channel_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_channel_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core channel check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_lang_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_lang_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    change)
      action="change"
      shift
      wpdocker_core_lang_change_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      wpdocker_core_lang_check_parse_requirements "$@"
      shift $#
      ;;

    list)
      action="list"
      shift
      wpdocker_core_lang_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_core_lang_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_lang_change_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_lang_change_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core lang change"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['lang']+x} ]]; then
          args['lang']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['lang']+x} ]]; then
    printf "missing required argument: LANG\nusage: wpdocker core lang change LANG\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_core_lang_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_lang_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core lang check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_lang_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_lang_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core lang list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_nginx_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_nginx_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    rebuild)
      action="rebuild"
      shift
      wpdocker_nginx_rebuild_parse_requirements "$@"
      shift $#
      ;;

    restart)
      action="restart"
      shift
      wpdocker_nginx_restart_parse_requirements "$@"
      shift $#
      ;;

    reload)
      action="reload"
      shift
      wpdocker_nginx_reload_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_nginx_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_nginx_rebuild_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_nginx_rebuild_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nginx rebuild"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_nginx_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_nginx_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nginx restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_nginx_reload_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_nginx_reload_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nginx reload"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    config)
      action="config"
      shift
      wpdocker_rclone_config_parse_requirements "$@"
      shift $#
      ;;

    upload)
      action="upload"
      shift
      wpdocker_rclone_upload_parse_requirements "$@"
      shift $#
      ;;

    delete)
      action="delete"
      shift
      wpdocker_rclone_delete_parse_requirements "$@"
      shift $#
      ;;

    list)
      action="list"
      shift
      wpdocker_rclone_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_rclone_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rclone config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_upload_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_upload_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    backup)
      action="backup"
      shift
      wpdocker_rclone_upload_backup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_rclone_upload_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_upload_backup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_upload_backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rclone upload backup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rclone delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rclone list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_debug_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_debug_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    mode)
      action="mode"
      shift
      wpdocker_debug_mode_parse_requirements "$@"
      shift $#
      ;;

    logs)
      action="logs"
      shift
      wpdocker_debug_logs_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_debug_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_debug_mode_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_debug_mode_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="debug mode"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_debug_logs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_debug_logs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="debug logs"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  # check if DEBUG_MODE=true
  if [[ "$DEBUG_MODE" == "true" ]]; then
      inspect_args
      return 0
  fi

}

after_hook() {
  # src/after.sh
  # check if DEBUG_MODE=true
  if [[ "$DEBUG_MODE" == "true" ]]; then
      inspect_args
      return 0
  fi

}

# :command.initialize
initialize() {
  declare -g version="1.2.0"
  set -e

  # src/initialize.sh
  SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]:-$0}")"
  SEARCH_PATH="$SCRIPT_PATH"

  while [[ "$SEARCH_PATH" != "/" ]]; do
      if [[ -f "$SEARCH_PATH/shared/config/load_config.sh" ]]; then
          source "$SEARCH_PATH/shared/config/load_config.sh"
          load_config_file
          break
      fi
      SEARCH_PATH="$(dirname "$SEARCH_PATH")"
  done

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "menu") wpdocker_menu_command ;;
    "website") wpdocker_website_command ;;
    "website create") wpdocker_website_create_command ;;
    "website delete") wpdocker_website_delete_command ;;
    "website list") wpdocker_website_list_command ;;
    "website restart") wpdocker_website_restart_command ;;
    "website logs") wpdocker_website_logs_command ;;
    "website info") wpdocker_website_info_command ;;
    "website restore") wpdocker_website_restore_command ;;
    "website update_template") wpdocker_website_update_template_command ;;
    "ssl") wpdocker_ssl_command ;;
    "ssl install") wpdocker_ssl_install_command ;;
    "ssl install selfsigned") wpdocker_ssl_install_selfsigned_command ;;
    "ssl install letsencrypt") wpdocker_ssl_install_letsencrypt_command ;;
    "ssl check") wpdocker_ssl_check_command ;;
    "php") wpdocker_php_command ;;
    "php change") wpdocker_php_change_command ;;
    "php get") wpdocker_php_get_command ;;
    "php rebuild") wpdocker_php_rebuild_command ;;
    "php edit") wpdocker_php_edit_command ;;
    "backup") wpdocker_backup_command ;;
    "backup website") wpdocker_backup_website_command ;;
    "backup database") wpdocker_backup_database_command ;;
    "backup file") wpdocker_backup_file_command ;;
    "backup restore") wpdocker_backup_restore_command ;;
    "backup restore website") wpdocker_backup_restore_website_command ;;
    "backup restore database") wpdocker_backup_restore_database_command ;;
    "backup restore file") wpdocker_backup_restore_file_command ;;
    "backup list") wpdocker_backup_list_command ;;
    "backup cleanup") wpdocker_backup_cleanup_command ;;
    "database") wpdocker_database_command ;;
    "database reset") wpdocker_database_reset_command ;;
    "database import") wpdocker_database_import_command ;;
    "database export") wpdocker_database_export_command ;;
    "database export all") wpdocker_database_export_all_command ;;
    "database export single") wpdocker_database_export_single_command ;;
    "wp") wpdocker_wp_command ;;
    "wp cli") wpdocker_wp_cli_command ;;
    "wp migrate") wpdocker_wp_migrate_command ;;
    "wp reset") wpdocker_wp_reset_command ;;
    "wp reset password") wpdocker_wp_reset_password_command ;;
    "wp reset role") wpdocker_wp_reset_role_command ;;
    "wp cache") wpdocker_wp_cache_command ;;
    "wp plugin") wpdocker_wp_plugin_command ;;
    "wp plugin auto-update") wpdocker_wp_plugin_auto_update_command ;;
    "wp security") wpdocker_wp_security_command ;;
    "wp security login") wpdocker_wp_security_login_command ;;
    "system") wpdocker_system_command ;;
    "system check") wpdocker_system_check_command ;;
    "system check resources") wpdocker_system_check_resources_command ;;
    "system check disk") wpdocker_system_check_disk_command ;;
    "system manage") wpdocker_system_manage_command ;;
    "system cleanup") wpdocker_system_cleanup_command ;;
    "cron") wpdocker_cron_command ;;
    "cron run") wpdocker_cron_run_command ;;
    "core") wpdocker_core_command ;;
    "core version") wpdocker_core_version_command ;;
    "core update") wpdocker_core_update_command ;;
    "core upgrade") wpdocker_core_upgrade_command ;;
    "core uninstall") wpdocker_core_uninstall_command ;;
    "core channel") wpdocker_core_channel_command ;;
    "core channel change") wpdocker_core_channel_change_command ;;
    "core channel check") wpdocker_core_channel_check_command ;;
    "core lang") wpdocker_core_lang_command ;;
    "core lang change") wpdocker_core_lang_change_command ;;
    "core lang check") wpdocker_core_lang_check_command ;;
    "core lang list") wpdocker_core_lang_list_command ;;
    "nginx") wpdocker_nginx_command ;;
    "nginx rebuild") wpdocker_nginx_rebuild_command ;;
    "nginx restart") wpdocker_nginx_restart_command ;;
    "nginx reload") wpdocker_nginx_reload_command ;;
    "rclone") wpdocker_rclone_command ;;
    "rclone config") wpdocker_rclone_config_command ;;
    "rclone upload") wpdocker_rclone_upload_command ;;
    "rclone upload backup") wpdocker_rclone_upload_backup_command ;;
    "rclone delete") wpdocker_rclone_delete_command ;;
    "rclone list") wpdocker_rclone_list_command ;;
    "debug") wpdocker_debug_command ;;
    "debug mode") wpdocker_debug_mode_command ;;
    "debug logs") wpdocker_debug_logs_command ;;
  esac

  after_hook
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
