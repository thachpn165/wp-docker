#!/usr/bin/env bash
# This script was generated by bashly 1.2.11 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
wpdocker_usage() {
  printf "wpdocker - Manage WordPress Docker environments easily\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker COMMAND\n"
  printf "  wpdocker [COMMAND] --help | -h\n"
  printf "  wpdocker --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Manage WordPress websites\n" "website  "
  printf "  %s   SSL certificate management\n" "ssl      "
  printf "  %s   Manage PHP versions\n" "php      "
  printf "  %s   Manage backups\n" "backup   "
  printf "  %s   Manage database operations\n" "database "
  printf "  %s   WordPress tools\n" "wordpress"
  printf "  %s   System operations\n" "system   "
  printf "  %s   Run cron tasks\n" "cron     "
  printf "  %s   Core management\n" "core     "
  printf "  %s   NGINX actions\n" "nginx    "
  printf "  %s   Rclone operations\n" "rclone   "
  printf "  %s   Debugging tools\n" "debug    "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
wpdocker_website_usage() {
  printf "wpdocker website - Manage WordPress websites\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website COMMAND\n"
  printf "  wpdocker website [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create a new WordPress site\n" "create         "
  printf "  %s   Delete an existing site\n" "delete         "
  printf "  %s   List all WordPress sites\n" "list           "
  printf "  %s   Restart a site\n" "restart        "
  printf "  %s   Show site logs\n" "logs           "
  printf "  %s   Show site info\n" "info           "
  printf "  %s   Restore site from backup\n" "restore        "
  printf "  %s   Update site template\n" "update_template"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_create_usage() {
  printf "wpdocker website create - Create a new WordPress site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website create DOMAIN PHP\n"
  printf "  wpdocker website create --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DOMAIN"
    printf "    Domain name for the new site\n"
    echo

    # :argument.usage
    printf "  %s\n" "PHP"
    printf "    PHP version for the new site\n"
    echo

  fi
}

# :command.usage
wpdocker_website_delete_usage() {
  printf "wpdocker website delete - Delete an existing site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website delete\n"
  printf "  wpdocker website delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_list_usage() {
  printf "wpdocker website list - List all WordPress sites\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website list\n"
  printf "  wpdocker website list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_restart_usage() {
  printf "wpdocker website restart - Restart a site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website restart\n"
  printf "  wpdocker website restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_logs_usage() {
  printf "wpdocker website logs - Show site logs\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website logs\n"
  printf "  wpdocker website logs --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_info_usage() {
  printf "wpdocker website info - Show site info\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website info\n"
  printf "  wpdocker website info --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_restore_usage() {
  printf "wpdocker website restore - Restore site from backup\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website restore\n"
  printf "  wpdocker website restore --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_website_update_template_usage() {
  printf "wpdocker website update_template - Update site template\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker website update_template\n"
  printf "  wpdocker website update_template --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_usage() {
  printf "wpdocker ssl - SSL certificate management\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl COMMAND\n"
  printf "  wpdocker ssl [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install self-signed SSL\n" "selfsigned "
  printf "  %s   Install Let's Encrypt SSL\n" "letsencrypt"
  printf "  %s   Check SSL certificate status\n" "check      "
  printf "  %s   Edit SSL configuration\n" "edit       "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_selfsigned_usage() {
  printf "wpdocker ssl selfsigned - Install self-signed SSL\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl selfsigned\n"
  printf "  wpdocker ssl selfsigned --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_letsencrypt_usage() {
  printf "wpdocker ssl letsencrypt - Install Let's Encrypt SSL\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl letsencrypt\n"
  printf "  wpdocker ssl letsencrypt --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_check_usage() {
  printf "wpdocker ssl check - Check SSL certificate status\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl check\n"
  printf "  wpdocker ssl check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_ssl_edit_usage() {
  printf "wpdocker ssl edit - Edit SSL configuration\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker ssl edit\n"
  printf "  wpdocker ssl edit --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_usage() {
  printf "wpdocker php - Manage PHP versions\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php COMMAND\n"
  printf "  wpdocker php [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Change PHP version\n" "change "
  printf "  %s   Get PHP version list from Docker Hub\n" "get    "
  printf "  %s   Rebuild PHP container\n" "rebuild"
  printf "  %s   Edit PHP configuration\n" "edit   "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_change_usage() {
  printf "wpdocker php change - Change PHP version\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php change\n"
  printf "  wpdocker php change --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_get_usage() {
  printf "wpdocker php get - Get PHP version list from Docker Hub\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php get\n"
  printf "  wpdocker php get --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_rebuild_usage() {
  printf "wpdocker php rebuild - Rebuild PHP container\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php rebuild\n"
  printf "  wpdocker php rebuild --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_edit_usage() {
  printf "wpdocker php edit - Edit PHP configuration\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php edit COMMAND\n"
  printf "  wpdocker php edit [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Edit PHP-FPM configuration\n" "conf"
  printf "  %s   Edit php.ini file\n" "ini "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_edit_conf_usage() {
  printf "wpdocker php edit conf - Edit PHP-FPM configuration\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php edit conf\n"
  printf "  wpdocker php edit conf --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_php_edit_ini_usage() {
  printf "wpdocker php edit ini - Edit php.ini file\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker php edit ini\n"
  printf "  wpdocker php edit ini --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_usage() {
  printf "wpdocker backup - Manage backups\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup COMMAND\n"
  printf "  wpdocker backup [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Backup website source + DB\n" "website "
  printf "  %s   Backup database only\n" "database"
  printf "  %s   Backup file only\n" "file    "
  printf "  %s   Restore backup\n" "restore "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_website_usage() {
  printf "wpdocker backup website - Backup website source + DB\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup website\n"
  printf "  wpdocker backup website --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_database_usage() {
  printf "wpdocker backup database - Backup database only\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup database\n"
  printf "  wpdocker backup database --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_file_usage() {
  printf "wpdocker backup file - Backup file only\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup file\n"
  printf "  wpdocker backup file --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_restore_usage() {
  printf "wpdocker backup restore - Restore backup\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup restore COMMAND\n"
  printf "  wpdocker backup restore [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Restore website source + DB\n" "website "
  printf "  %s   Restore database only\n" "database"
  printf "  %s   Restore file only\n" "file    "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_restore_website_usage() {
  printf "wpdocker backup restore website - Restore website source + DB\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup restore website\n"
  printf "  wpdocker backup restore website --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_restore_database_usage() {
  printf "wpdocker backup restore database - Restore database only\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup restore database\n"
  printf "  wpdocker backup restore database --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_backup_restore_file_usage() {
  printf "wpdocker backup restore file - Restore file only\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker backup restore file\n"
  printf "  wpdocker backup restore file --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_usage() {
  printf "wpdocker database - Manage database operations\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database COMMAND\n"
  printf "  wpdocker database [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Reset site database\n" "reset "
  printf "  %s   Import a SQL database\n" "import"
  printf "  %s   Export site database\n" "export"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_reset_usage() {
  printf "wpdocker database reset - Reset site database\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database reset\n"
  printf "  wpdocker database reset --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_import_usage() {
  printf "wpdocker database import - Import a SQL database\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database import\n"
  printf "  wpdocker database import --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_database_export_usage() {
  printf "wpdocker database export - Export site database\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker database export\n"
  printf "  wpdocker database export --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_usage() {
  printf "wpdocker wordpress - WordPress tools\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress COMMAND\n"
  printf "  wpdocker wordpress [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run WP-CLI commands inside container\n" "cli     "
  printf "  %s   Migrate WordPress site\n" "migrate "
  printf "  %s   Reset features\n" "reset   "
  printf "  %s   Setup caching\n" "cache   "
  printf "  %s   Plugin tools\n" "plugin  "
  printf "  %s   Security enhancements\n" "security"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_cli_usage() {
  printf "wpdocker wordpress cli - Run WP-CLI commands inside container\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress cli\n"
  printf "  wpdocker wordpress cli --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_migrate_usage() {
  printf "wpdocker wordpress migrate - Migrate WordPress site\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress migrate\n"
  printf "  wpdocker wordpress migrate --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_reset_usage() {
  printf "wpdocker wordpress reset - Reset features\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress reset COMMAND\n"
  printf "  wpdocker wordpress reset [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Reset admin password\n" "password"
  printf "  %s   Reset user roles\n" "role    "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_reset_password_usage() {
  printf "wpdocker wordpress reset password - Reset admin password\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress reset password\n"
  printf "  wpdocker wordpress reset password --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_reset_role_usage() {
  printf "wpdocker wordpress reset role - Reset user roles\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress reset role\n"
  printf "  wpdocker wordpress reset role --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_cache_usage() {
  printf "wpdocker wordpress cache - Setup caching\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress cache\n"
  printf "  wpdocker wordpress cache --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_plugin_usage() {
  printf "wpdocker wordpress plugin - Plugin tools\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress plugin COMMAND\n"
  printf "  wpdocker wordpress plugin [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Enable plugin auto update\n" "auto-update"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_plugin_auto_update_usage() {
  printf "wpdocker wordpress plugin auto-update - Enable plugin auto update\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress plugin auto-update\n"
  printf "  wpdocker wordpress plugin auto-update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_security_usage() {
  printf "wpdocker wordpress security - Security enhancements\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress security COMMAND\n"
  printf "  wpdocker wordpress security [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Protect wp-login.php\n" "wplogin"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_wordpress_security_wplogin_usage() {
  printf "wpdocker wordpress security wplogin - Protect wp-login.php\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker wordpress security wplogin\n"
  printf "  wpdocker wordpress security wplogin --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_usage() {
  printf "wpdocker system - System operations\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system COMMAND\n"
  printf "  wpdocker system [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Check system resources\n" "check  "
  printf "  %s   Manage Docker containers\n" "manage "
  printf "  %s   Cleanup unused Docker resources\n" "cleanup"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_check_usage() {
  printf "wpdocker system check - Check system resources\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system check COMMAND\n"
  printf "  wpdocker system check [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Check system resources of Docker\n" "resources"
  printf "  %s   Check disk space usage of WP Docker\n" "disk     "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_check_resources_usage() {
  printf "wpdocker system check resources - Check system resources of Docker\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system check resources\n"
  printf "  wpdocker system check resources --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_check_disk_usage() {
  printf "wpdocker system check disk - Check disk space usage of WP Docker\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system check disk\n"
  printf "  wpdocker system check disk --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_manage_usage() {
  printf "wpdocker system manage - Manage Docker containers\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system manage\n"
  printf "  wpdocker system manage --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_system_cleanup_usage() {
  printf "wpdocker system cleanup - Cleanup unused Docker resources\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker system cleanup\n"
  printf "  wpdocker system cleanup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_cron_usage() {
  printf "wpdocker cron - Run cron tasks\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker cron COMMAND\n"
  printf "  wpdocker cron [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Cron related to Let's Encrypt\n" "letsencrypt"
  printf "  %s   Run all scheduled crons\n" "all        "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_cron_letsencrypt_usage() {
  printf "wpdocker cron letsencrypt - Cron related to Let's Encrypt\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker cron letsencrypt COMMAND\n"
  printf "  wpdocker cron letsencrypt [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Renew Let's Encrypt SSL\n" "renew"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_cron_letsencrypt_renew_usage() {
  printf "wpdocker cron letsencrypt renew - Renew Let's Encrypt SSL\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker cron letsencrypt renew\n"
  printf "  wpdocker cron letsencrypt renew --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_cron_all_usage() {
  printf "wpdocker cron all - Run all scheduled crons\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker cron all\n"
  printf "  wpdocker cron all --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_usage() {
  printf "wpdocker core - Core management\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core COMMAND\n"
  printf "  wpdocker core [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Show current and latest version\n" "version  "
  printf "  %s   Update core system to the latest version\n" "update   "
  printf "  %s   Run the upgrade scripts\n" "upgrade  "
  printf "  %s   Uninstall WP Docker\n" "uninstall"
  printf "  %s   Update channel options\n" "channel  "
  printf "  %s   Language options\n" "lang     "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_version_usage() {
  printf "wpdocker core version - Show current and latest version\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core version\n"
  printf "  wpdocker core version --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_update_usage() {
  printf "wpdocker core update - Update core system to the latest version\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core update\n"
  printf "  wpdocker core update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_upgrade_usage() {
  printf "wpdocker core upgrade - Run the upgrade scripts\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core upgrade\n"
  printf "  wpdocker core upgrade --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_uninstall_usage() {
  printf "wpdocker core uninstall - Uninstall WP Docker\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core uninstall\n"
  printf "  wpdocker core uninstall --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_channel_usage() {
  printf "wpdocker core channel - Update channel options\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core channel COMMAND\n"
  printf "  wpdocker core channel [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Change release channel\n" "change"
  printf "  %s   Show current channel\n" "check "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_channel_change_usage() {
  printf "wpdocker core channel change - Change release channel\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core channel change\n"
  printf "  wpdocker core channel change --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_channel_check_usage() {
  printf "wpdocker core channel check - Show current channel\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core channel check\n"
  printf "  wpdocker core channel check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_lang_usage() {
  printf "wpdocker core lang - Language options\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core lang COMMAND\n"
  printf "  wpdocker core lang [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Change CLI language\n" "change"
  printf "  %s   Show current language\n" "check "
  printf "  %s   List supported languages\n" "list  "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_lang_change_usage() {
  printf "wpdocker core lang change - Change CLI language\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core lang change\n"
  printf "  wpdocker core lang change --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_lang_check_usage() {
  printf "wpdocker core lang check - Show current language\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core lang check\n"
  printf "  wpdocker core lang check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_core_lang_list_usage() {
  printf "wpdocker core lang list - List supported languages\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker core lang list\n"
  printf "  wpdocker core lang list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_nginx_usage() {
  printf "wpdocker nginx - NGINX actions\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker nginx COMMAND\n"
  printf "  wpdocker nginx [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Rebuild NGINX proxy\n" "rebuild"
  printf "  %s   Restart NGINX proxy\n" "restart"
  printf "  %s   Reload NGINX configuration\n" "reload "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_nginx_rebuild_usage() {
  printf "wpdocker nginx rebuild - Rebuild NGINX proxy\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker nginx rebuild\n"
  printf "  wpdocker nginx rebuild --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_nginx_restart_usage() {
  printf "wpdocker nginx restart - Restart NGINX proxy\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker nginx restart\n"
  printf "  wpdocker nginx restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_nginx_reload_usage() {
  printf "wpdocker nginx reload - Reload NGINX configuration\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker nginx reload\n"
  printf "  wpdocker nginx reload --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_usage() {
  printf "wpdocker rclone - Rclone operations\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone COMMAND\n"
  printf "  wpdocker rclone [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Rclone configuration\n" "config"
  printf "  %s   Upload files to remote storage\n" "upload"
  printf "  %s   delete storage config\n" "delete"
  printf "  %s   List storage in config\n" "list  "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_config_usage() {
  printf "wpdocker rclone config - Rclone configuration\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone config\n"
  printf "  wpdocker rclone config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_upload_usage() {
  printf "wpdocker rclone upload - Upload files to remote storage\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone upload COMMAND\n"
  printf "  wpdocker rclone upload [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Upload backup files\n" "backup"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_upload_backup_usage() {
  printf "wpdocker rclone upload backup - Upload backup files\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone upload backup\n"
  printf "  wpdocker rclone upload backup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_delete_usage() {
  printf "wpdocker rclone delete - delete storage config\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone delete\n"
  printf "  wpdocker rclone delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_rclone_list_usage() {
  printf "wpdocker rclone list - List storage in config\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker rclone list\n"
  printf "  wpdocker rclone list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_debug_usage() {
  printf "wpdocker debug - Debugging tools\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker debug COMMAND\n"
  printf "  wpdocker debug [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Enable and disable debug mode\n" "mode"
  printf "  %s   Show debug logs\n" "logs"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_debug_mode_usage() {
  printf "wpdocker debug mode - Enable and disable debug mode\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker debug mode\n"
  printf "  wpdocker debug mode --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
wpdocker_debug_logs_usage() {
  printf "wpdocker debug logs - Show debug logs\n\n"

  printf "%s\n" "Usage:"
  printf "  wpdocker debug logs\n"
  printf "  wpdocker debug logs --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.function
wpdocker_website_create_command() {

  # src/website_create_command.sh
  safe_source "$CLI_DIR/website_create.sh"

  website_cli_create --domain="${args[domain]}" --php="${args[php]}"
}

# :command.function
wpdocker_website_delete_command() {

  # src/website_delete_command.sh
  echo "# This file is located at 'src/website_delete_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website delete' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_delete_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_website_list_command() {

  # src/website_list_command.sh
  echo "# This file is located at 'src/website_list_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website list' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_list_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_website_restart_command() {

  # src/website_restart_command.sh
  echo "# This file is located at 'src/website_restart_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website restart' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_restart_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_website_logs_command() {

  # src/website_logs_command.sh
  echo "# This file is located at 'src/website_logs_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website logs' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_logs_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_website_info_command() {

  # src/website_info_command.sh
  echo "# This file is located at 'src/website_info_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website info' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_info_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_website_restore_command() {

  # src/website_restore_command.sh
  echo "# This file is located at 'src/website_restore_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website restore' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_restore_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_website_update_template_command() {

  # src/website_update_template_command.sh
  echo "# This file is located at 'src/website_update_template_command.sh'."
  echo "# It contains the implementation for the 'wpdocker website update_template' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_website_update_template_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_ssl_selfsigned_command() {

  # src/ssl_selfsigned_command.sh
  echo "# This file is located at 'src/ssl_selfsigned_command.sh'."
  echo "# It contains the implementation for the 'wpdocker ssl selfsigned' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_ssl_selfsigned_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_ssl_letsencrypt_command() {

  # src/ssl_letsencrypt_command.sh
  echo "# This file is located at 'src/ssl_letsencrypt_command.sh'."
  echo "# It contains the implementation for the 'wpdocker ssl letsencrypt' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_ssl_letsencrypt_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_ssl_check_command() {

  # src/ssl_check_command.sh
  echo "# This file is located at 'src/ssl_check_command.sh'."
  echo "# It contains the implementation for the 'wpdocker ssl check' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_ssl_check_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_ssl_edit_command() {

  # src/ssl_edit_command.sh
  echo "# This file is located at 'src/ssl_edit_command.sh'."
  echo "# It contains the implementation for the 'wpdocker ssl edit' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_ssl_edit_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_php_change_command() {

  # src/php_change_command.sh
  echo "# This file is located at 'src/php_change_command.sh'."
  echo "# It contains the implementation for the 'wpdocker php change' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_php_change_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_php_get_command() {

  # src/php_get_command.sh
  echo "# This file is located at 'src/php_get_command.sh'."
  echo "# It contains the implementation for the 'wpdocker php get' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_php_get_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_php_rebuild_command() {

  # src/php_rebuild_command.sh
  echo "# This file is located at 'src/php_rebuild_command.sh'."
  echo "# It contains the implementation for the 'wpdocker php rebuild' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_php_rebuild_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_php_edit_conf_command() {

  # src/php_edit_conf_command.sh
  echo "# This file is located at 'src/php_edit_conf_command.sh'."
  echo "# It contains the implementation for the 'wpdocker php edit conf' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_php_edit_conf_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_php_edit_ini_command() {

  # src/php_edit_ini_command.sh
  echo "# This file is located at 'src/php_edit_ini_command.sh'."
  echo "# It contains the implementation for the 'wpdocker php edit ini' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_php_edit_ini_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_backup_website_command() {

  # src/backup_website_command.sh
  echo "# This file is located at 'src/backup_website_command.sh'."
  echo "# It contains the implementation for the 'wpdocker backup website' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_backup_website_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_backup_database_command() {

  # src/backup_database_command.sh
  echo "# This file is located at 'src/backup_database_command.sh'."
  echo "# It contains the implementation for the 'wpdocker backup database' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_backup_database_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_backup_file_command() {

  # src/backup_file_command.sh
  echo "# This file is located at 'src/backup_file_command.sh'."
  echo "# It contains the implementation for the 'wpdocker backup file' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_backup_file_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_backup_restore_website_command() {

  # src/backup_restore_website_command.sh
  echo "# This file is located at 'src/backup_restore_website_command.sh'."
  echo "# It contains the implementation for the 'wpdocker backup restore website' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_backup_restore_website_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_backup_restore_database_command() {

  # src/backup_restore_database_command.sh
  echo "# This file is located at 'src/backup_restore_database_command.sh'."
  echo "# It contains the implementation for the 'wpdocker backup restore database' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_backup_restore_database_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_backup_restore_file_command() {

  # src/backup_restore_file_command.sh
  echo "# This file is located at 'src/backup_restore_file_command.sh'."
  echo "# It contains the implementation for the 'wpdocker backup restore file' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_backup_restore_file_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_database_reset_command() {

  # src/database_reset_command.sh
  echo "# This file is located at 'src/database_reset_command.sh'."
  echo "# It contains the implementation for the 'wpdocker database reset' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_database_reset_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_database_import_command() {

  # src/database_import_command.sh
  echo "# This file is located at 'src/database_import_command.sh'."
  echo "# It contains the implementation for the 'wpdocker database import' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_database_import_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_database_export_command() {

  # src/database_export_command.sh
  echo "# This file is located at 'src/database_export_command.sh'."
  echo "# It contains the implementation for the 'wpdocker database export' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_database_export_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wordpress_cli_command() {

  # src/wordpress_cli_command.sh
  echo "# This file is located at 'src/wordpress_cli_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wordpress cli' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wordpress_cli_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wordpress_migrate_command() {

  # src/wordpress_migrate_command.sh
  echo "# This file is located at 'src/wordpress_migrate_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wordpress migrate' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wordpress_migrate_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wordpress_reset_password_command() {

  # src/wordpress_reset_password_command.sh
  echo "# This file is located at 'src/wordpress_reset_password_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wordpress reset password' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wordpress_reset_password_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wordpress_reset_role_command() {

  # src/wordpress_reset_role_command.sh
  echo "# This file is located at 'src/wordpress_reset_role_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wordpress reset role' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wordpress_reset_role_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wordpress_cache_command() {

  # src/wordpress_cache_command.sh
  echo "# This file is located at 'src/wordpress_cache_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wordpress cache' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wordpress_cache_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wordpress_plugin_auto_update_command() {

  # src/wordpress_plugin_auto_update_command.sh
  echo "# This file is located at 'src/wordpress_plugin_auto_update_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wordpress plugin auto-update' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wordpress_plugin_auto_update_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_wordpress_security_wplogin_command() {

  # src/wordpress_security_wplogin_command.sh
  echo "# This file is located at 'src/wordpress_security_wplogin_command.sh'."
  echo "# It contains the implementation for the 'wpdocker wordpress security wplogin' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_wordpress_security_wplogin_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_system_check_resources_command() {

  # src/system_check_resources_command.sh
  echo "# This file is located at 'src/system_check_resources_command.sh'."
  echo "# It contains the implementation for the 'wpdocker system check resources' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_system_check_resources_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_system_check_disk_command() {

  # src/system_check_disk_command.sh
  echo "# This file is located at 'src/system_check_disk_command.sh'."
  echo "# It contains the implementation for the 'wpdocker system check disk' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_system_check_disk_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_system_manage_command() {

  # src/system_manage_command.sh
  echo "# This file is located at 'src/system_manage_command.sh'."
  echo "# It contains the implementation for the 'wpdocker system manage' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_system_manage_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_system_cleanup_command() {

  # src/system_cleanup_command.sh
  echo "# This file is located at 'src/system_cleanup_command.sh'."
  echo "# It contains the implementation for the 'wpdocker system cleanup' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_system_cleanup_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_cron_letsencrypt_renew_command() {

  # src/cron_letsencrypt_renew_command.sh
  echo "# This file is located at 'src/cron_letsencrypt_renew_command.sh'."
  echo "# It contains the implementation for the 'wpdocker cron letsencrypt renew' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_cron_letsencrypt_renew_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_cron_all_command() {

  # src/cron_all_command.sh
  echo "# This file is located at 'src/cron_all_command.sh'."
  echo "# It contains the implementation for the 'wpdocker cron all' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_cron_all_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_version_command() {

  # src/core_version_command.sh
  echo "# This file is located at 'src/core_version_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core version' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_version_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_update_command() {

  # src/core_update_command.sh
  echo "# This file is located at 'src/core_update_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core update' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_update_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_upgrade_command() {

  # src/core_upgrade_command.sh
  echo "# This file is located at 'src/core_upgrade_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core upgrade' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_upgrade_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_uninstall_command() {

  # src/core_uninstall_command.sh
  echo "# This file is located at 'src/core_uninstall_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core uninstall' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_uninstall_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_channel_change_command() {

  # src/core_channel_change_command.sh
  echo "# This file is located at 'src/core_channel_change_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core channel change' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_channel_change_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_channel_check_command() {

  # src/core_channel_check_command.sh
  echo "# This file is located at 'src/core_channel_check_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core channel check' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_channel_check_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_lang_change_command() {

  # src/core_lang_change_command.sh
  echo "# This file is located at 'src/core_lang_change_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core lang change' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_lang_change_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_lang_check_command() {

  # src/core_lang_check_command.sh
  echo "# This file is located at 'src/core_lang_check_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core lang check' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_lang_check_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_core_lang_list_command() {

  # src/core_lang_list_command.sh
  echo "# This file is located at 'src/core_lang_list_command.sh'."
  echo "# It contains the implementation for the 'wpdocker core lang list' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_core_lang_list_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_nginx_rebuild_command() {

  # src/nginx_rebuild_command.sh
  echo "# This file is located at 'src/nginx_rebuild_command.sh'."
  echo "# It contains the implementation for the 'wpdocker nginx rebuild' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_nginx_rebuild_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_nginx_restart_command() {

  # src/nginx_restart_command.sh
  echo "# This file is located at 'src/nginx_restart_command.sh'."
  echo "# It contains the implementation for the 'wpdocker nginx restart' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_nginx_restart_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_nginx_reload_command() {

  # src/nginx_reload_command.sh
  echo "# This file is located at 'src/nginx_reload_command.sh'."
  echo "# It contains the implementation for the 'wpdocker nginx reload' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_nginx_reload_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_rclone_config_command() {

  # src/rclone_config_command.sh
  echo "# This file is located at 'src/rclone_config_command.sh'."
  echo "# It contains the implementation for the 'wpdocker rclone config' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_rclone_config_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_rclone_upload_backup_command() {

  # src/rclone_upload_backup_command.sh
  echo "# This file is located at 'src/rclone_upload_backup_command.sh'."
  echo "# It contains the implementation for the 'wpdocker rclone upload backup' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_rclone_upload_backup_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_rclone_delete_command() {

  # src/rclone_delete_command.sh
  echo "# This file is located at 'src/rclone_delete_command.sh'."
  echo "# It contains the implementation for the 'wpdocker rclone delete' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_rclone_delete_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_rclone_list_command() {

  # src/rclone_list_command.sh
  echo "# This file is located at 'src/rclone_list_command.sh'."
  echo "# It contains the implementation for the 'wpdocker rclone list' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_rclone_list_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_debug_mode_command() {

  # src/debug_mode_command.sh
  echo "# This file is located at 'src/debug_mode_command.sh'."
  echo "# It contains the implementation for the 'wpdocker debug mode' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_debug_mode_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
wpdocker_debug_logs_command() {

  # src/debug_logs_command.sh
  echo "# This file is located at 'src/debug_logs_command.sh'."
  echo "# It contains the implementation for the 'wpdocker debug logs' command."
  echo "# The code you write here will be wrapped by a function named 'wpdocker_debug_logs_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        wpdocker_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    website)
      action="website"
      shift
      wpdocker_website_parse_requirements "$@"
      shift $#
      ;;

    ssl)
      action="ssl"
      shift
      wpdocker_ssl_parse_requirements "$@"
      shift $#
      ;;

    php)
      action="php"
      shift
      wpdocker_php_parse_requirements "$@"
      shift $#
      ;;

    backup)
      action="backup"
      shift
      wpdocker_backup_parse_requirements "$@"
      shift $#
      ;;

    database)
      action="database"
      shift
      wpdocker_database_parse_requirements "$@"
      shift $#
      ;;

    wordpress)
      action="wordpress"
      shift
      wpdocker_wordpress_parse_requirements "$@"
      shift $#
      ;;

    system)
      action="system"
      shift
      wpdocker_system_parse_requirements "$@"
      shift $#
      ;;

    cron)
      action="cron"
      shift
      wpdocker_cron_parse_requirements "$@"
      shift $#
      ;;

    core)
      action="core"
      shift
      wpdocker_core_parse_requirements "$@"
      shift $#
      ;;

    nginx)
      action="nginx"
      shift
      wpdocker_nginx_parse_requirements "$@"
      shift $#
      ;;

    rclone)
      action="rclone"
      shift
      wpdocker_rclone_parse_requirements "$@"
      shift $#
      ;;

    debug)
      action="debug"
      shift
      wpdocker_debug_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    create)
      action="create"
      shift
      wpdocker_website_create_parse_requirements "$@"
      shift $#
      ;;

    delete)
      action="delete"
      shift
      wpdocker_website_delete_parse_requirements "$@"
      shift $#
      ;;

    list)
      action="list"
      shift
      wpdocker_website_list_parse_requirements "$@"
      shift $#
      ;;

    restart)
      action="restart"
      shift
      wpdocker_website_restart_parse_requirements "$@"
      shift $#
      ;;

    logs)
      action="logs"
      shift
      wpdocker_website_logs_parse_requirements "$@"
      shift $#
      ;;

    info)
      action="info"
      shift
      wpdocker_website_info_parse_requirements "$@"
      shift $#
      ;;

    restore)
      action="restore"
      shift
      wpdocker_website_restore_parse_requirements "$@"
      shift $#
      ;;

    update_template)
      action="update_template"
      shift
      wpdocker_website_update_template_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_website_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_create_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website create"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['domain']+x} ]]; then
          args['domain']=$1
          shift
        # :argument.case
        elif [[ -z ${args['php']+x} ]]; then
          args['php']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['domain']+x} ]]; then
    printf "missing required argument: DOMAIN\nusage: wpdocker website create DOMAIN PHP\n" >&2

    exit 1
  fi

  if [[ -z ${args['php']+x} ]]; then
    printf "missing required argument: PHP\nusage: wpdocker website create DOMAIN PHP\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
wpdocker_website_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_logs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_logs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website logs"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_info_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_info_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website info"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website restore"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_website_update_template_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_website_update_template_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="website update_template"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_ssl_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    selfsigned)
      action="selfsigned"
      shift
      wpdocker_ssl_selfsigned_parse_requirements "$@"
      shift $#
      ;;

    letsencrypt)
      action="letsencrypt"
      shift
      wpdocker_ssl_letsencrypt_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      wpdocker_ssl_check_parse_requirements "$@"
      shift $#
      ;;

    edit)
      action="edit"
      shift
      wpdocker_ssl_edit_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_ssl_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_ssl_selfsigned_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_selfsigned_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ssl selfsigned"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_ssl_letsencrypt_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_letsencrypt_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ssl letsencrypt"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_ssl_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ssl check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_ssl_edit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_ssl_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ssl edit"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    change)
      action="change"
      shift
      wpdocker_php_change_parse_requirements "$@"
      shift $#
      ;;

    get)
      action="get"
      shift
      wpdocker_php_get_parse_requirements "$@"
      shift $#
      ;;

    rebuild)
      action="rebuild"
      shift
      wpdocker_php_rebuild_parse_requirements "$@"
      shift $#
      ;;

    edit)
      action="edit"
      shift
      wpdocker_php_edit_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_php_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_change_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_change_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php change"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_get_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php get"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_rebuild_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_rebuild_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php rebuild"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_edit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    conf)
      action="conf"
      shift
      wpdocker_php_edit_conf_parse_requirements "$@"
      shift $#
      ;;

    ini)
      action="ini"
      shift
      wpdocker_php_edit_ini_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_php_edit_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_edit_conf_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_edit_conf_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php edit conf"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_php_edit_ini_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_php_edit_ini_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="php edit ini"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    website)
      action="website"
      shift
      wpdocker_backup_website_parse_requirements "$@"
      shift $#
      ;;

    database)
      action="database"
      shift
      wpdocker_backup_database_parse_requirements "$@"
      shift $#
      ;;

    file)
      action="file"
      shift
      wpdocker_backup_file_parse_requirements "$@"
      shift $#
      ;;

    restore)
      action="restore"
      shift
      wpdocker_backup_restore_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_backup_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_website_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_website_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup website"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup database"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_file_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_file_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup file"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    website)
      action="website"
      shift
      wpdocker_backup_restore_website_parse_requirements "$@"
      shift $#
      ;;

    database)
      action="database"
      shift
      wpdocker_backup_restore_database_parse_requirements "$@"
      shift $#
      ;;

    file)
      action="file"
      shift
      wpdocker_backup_restore_file_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_backup_restore_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_restore_website_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_restore_website_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup restore website"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_restore_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_restore_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup restore database"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_backup_restore_file_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_backup_restore_file_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup restore file"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    reset)
      action="reset"
      shift
      wpdocker_database_reset_parse_requirements "$@"
      shift $#
      ;;

    import)
      action="import"
      shift
      wpdocker_database_import_parse_requirements "$@"
      shift $#
      ;;

    export)
      action="export"
      shift
      wpdocker_database_export_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_database_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_reset_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_reset_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database reset"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_import_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_import_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database import"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_database_export_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_database_export_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database export"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    cli)
      action="cli"
      shift
      wpdocker_wordpress_cli_parse_requirements "$@"
      shift $#
      ;;

    migrate)
      action="migrate"
      shift
      wpdocker_wordpress_migrate_parse_requirements "$@"
      shift $#
      ;;

    reset)
      action="reset"
      shift
      wpdocker_wordpress_reset_parse_requirements "$@"
      shift $#
      ;;

    cache)
      action="cache"
      shift
      wpdocker_wordpress_cache_parse_requirements "$@"
      shift $#
      ;;

    plugin)
      action="plugin"
      shift
      wpdocker_wordpress_plugin_parse_requirements "$@"
      shift $#
      ;;

    security)
      action="security"
      shift
      wpdocker_wordpress_security_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_wordpress_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_cli_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_cli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wordpress cli"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_migrate_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_migrate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wordpress migrate"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_reset_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_reset_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    password)
      action="password"
      shift
      wpdocker_wordpress_reset_password_parse_requirements "$@"
      shift $#
      ;;

    role)
      action="role"
      shift
      wpdocker_wordpress_reset_role_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_wordpress_reset_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_reset_password_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_reset_password_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wordpress reset password"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_reset_role_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_reset_role_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wordpress reset role"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_cache_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_cache_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wordpress cache"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_plugin_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_plugin_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    auto-update)
      action="auto-update"
      shift
      wpdocker_wordpress_plugin_auto_update_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_wordpress_plugin_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_plugin_auto_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_plugin_auto_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wordpress plugin auto-update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_security_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_security_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    wplogin)
      action="wplogin"
      shift
      wpdocker_wordpress_security_wplogin_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_wordpress_security_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_wordpress_security_wplogin_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_wordpress_security_wplogin_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wordpress security wplogin"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    check)
      action="check"
      shift
      wpdocker_system_check_parse_requirements "$@"
      shift $#
      ;;

    manage)
      action="manage"
      shift
      wpdocker_system_manage_parse_requirements "$@"
      shift $#
      ;;

    cleanup)
      action="cleanup"
      shift
      wpdocker_system_cleanup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_system_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    resources)
      action="resources"
      shift
      wpdocker_system_check_resources_parse_requirements "$@"
      shift $#
      ;;

    disk)
      action="disk"
      shift
      wpdocker_system_check_disk_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_system_check_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_check_resources_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_check_resources_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system check resources"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_check_disk_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_check_disk_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system check disk"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_manage_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_manage_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system manage"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_system_cleanup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_system_cleanup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system cleanup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_cron_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_cron_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    letsencrypt)
      action="letsencrypt"
      shift
      wpdocker_cron_letsencrypt_parse_requirements "$@"
      shift $#
      ;;

    all)
      action="all"
      shift
      wpdocker_cron_all_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_cron_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_cron_letsencrypt_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_cron_letsencrypt_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    renew)
      action="renew"
      shift
      wpdocker_cron_letsencrypt_renew_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_cron_letsencrypt_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_cron_letsencrypt_renew_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_cron_letsencrypt_renew_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="cron letsencrypt renew"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_cron_all_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_cron_all_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="cron all"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    version)
      action="version"
      shift
      wpdocker_core_version_parse_requirements "$@"
      shift $#
      ;;

    update)
      action="update"
      shift
      wpdocker_core_update_parse_requirements "$@"
      shift $#
      ;;

    upgrade)
      action="upgrade"
      shift
      wpdocker_core_upgrade_parse_requirements "$@"
      shift $#
      ;;

    uninstall)
      action="uninstall"
      shift
      wpdocker_core_uninstall_parse_requirements "$@"
      shift $#
      ;;

    channel)
      action="channel"
      shift
      wpdocker_core_channel_parse_requirements "$@"
      shift $#
      ;;

    lang)
      action="lang"
      shift
      wpdocker_core_lang_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_core_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_version_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_version_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core version"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_upgrade_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_upgrade_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core upgrade"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_uninstall_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core uninstall"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_channel_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_channel_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    change)
      action="change"
      shift
      wpdocker_core_channel_change_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      wpdocker_core_channel_check_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_core_channel_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_channel_change_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_channel_change_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core channel change"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_channel_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_channel_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core channel check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_lang_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_lang_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    change)
      action="change"
      shift
      wpdocker_core_lang_change_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      wpdocker_core_lang_check_parse_requirements "$@"
      shift $#
      ;;

    list)
      action="list"
      shift
      wpdocker_core_lang_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_core_lang_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_lang_change_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_lang_change_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core lang change"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_lang_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_lang_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core lang check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_core_lang_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_core_lang_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="core lang list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_nginx_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_nginx_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    rebuild)
      action="rebuild"
      shift
      wpdocker_nginx_rebuild_parse_requirements "$@"
      shift $#
      ;;

    restart)
      action="restart"
      shift
      wpdocker_nginx_restart_parse_requirements "$@"
      shift $#
      ;;

    reload)
      action="reload"
      shift
      wpdocker_nginx_reload_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_nginx_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_nginx_rebuild_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_nginx_rebuild_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nginx rebuild"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_nginx_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_nginx_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nginx restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_nginx_reload_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_nginx_reload_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nginx reload"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    config)
      action="config"
      shift
      wpdocker_rclone_config_parse_requirements "$@"
      shift $#
      ;;

    upload)
      action="upload"
      shift
      wpdocker_rclone_upload_parse_requirements "$@"
      shift $#
      ;;

    delete)
      action="delete"
      shift
      wpdocker_rclone_delete_parse_requirements "$@"
      shift $#
      ;;

    list)
      action="list"
      shift
      wpdocker_rclone_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_rclone_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rclone config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_upload_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_upload_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    backup)
      action="backup"
      shift
      wpdocker_rclone_upload_backup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_rclone_upload_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_upload_backup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_upload_backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rclone upload backup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rclone delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_rclone_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_rclone_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rclone list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_debug_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_debug_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    mode)
      action="mode"
      shift
      wpdocker_debug_mode_parse_requirements "$@"
      shift $#
      ;;

    logs)
      action="logs"
      shift
      wpdocker_debug_logs_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpdocker_debug_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_debug_mode_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_debug_mode_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="debug mode"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpdocker_debug_logs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        wpdocker_debug_logs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="debug logs"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  echo "==[ Before Hook Called ]=="
  inspect_args
}

after_hook() {
  # src/after.sh
  echo "==[ After Hook Called ]=="
}

# :command.initialize
initialize() {
  declare -g version="1.2.0"
  set -e

  # src/initialize.sh
  SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]:-$0}")"
  SEARCH_PATH="$SCRIPT_PATH"

  while [[ "$SEARCH_PATH" != "/" ]]; do
      if [[ -f "$SEARCH_PATH/shared/config/load_config.sh" ]]; then
          source "$SEARCH_PATH/shared/config/load_config.sh"
          load_config_file
          break
      fi
      SEARCH_PATH="$(dirname "$SEARCH_PATH")"
  done

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "website") wpdocker_website_command ;;
    "website create") wpdocker_website_create_command ;;
    "website delete") wpdocker_website_delete_command ;;
    "website list") wpdocker_website_list_command ;;
    "website restart") wpdocker_website_restart_command ;;
    "website logs") wpdocker_website_logs_command ;;
    "website info") wpdocker_website_info_command ;;
    "website restore") wpdocker_website_restore_command ;;
    "website update_template") wpdocker_website_update_template_command ;;
    "ssl") wpdocker_ssl_command ;;
    "ssl selfsigned") wpdocker_ssl_selfsigned_command ;;
    "ssl letsencrypt") wpdocker_ssl_letsencrypt_command ;;
    "ssl check") wpdocker_ssl_check_command ;;
    "ssl edit") wpdocker_ssl_edit_command ;;
    "php") wpdocker_php_command ;;
    "php change") wpdocker_php_change_command ;;
    "php get") wpdocker_php_get_command ;;
    "php rebuild") wpdocker_php_rebuild_command ;;
    "php edit") wpdocker_php_edit_command ;;
    "php edit conf") wpdocker_php_edit_conf_command ;;
    "php edit ini") wpdocker_php_edit_ini_command ;;
    "backup") wpdocker_backup_command ;;
    "backup website") wpdocker_backup_website_command ;;
    "backup database") wpdocker_backup_database_command ;;
    "backup file") wpdocker_backup_file_command ;;
    "backup restore") wpdocker_backup_restore_command ;;
    "backup restore website") wpdocker_backup_restore_website_command ;;
    "backup restore database") wpdocker_backup_restore_database_command ;;
    "backup restore file") wpdocker_backup_restore_file_command ;;
    "database") wpdocker_database_command ;;
    "database reset") wpdocker_database_reset_command ;;
    "database import") wpdocker_database_import_command ;;
    "database export") wpdocker_database_export_command ;;
    "wordpress") wpdocker_wordpress_command ;;
    "wordpress cli") wpdocker_wordpress_cli_command ;;
    "wordpress migrate") wpdocker_wordpress_migrate_command ;;
    "wordpress reset") wpdocker_wordpress_reset_command ;;
    "wordpress reset password") wpdocker_wordpress_reset_password_command ;;
    "wordpress reset role") wpdocker_wordpress_reset_role_command ;;
    "wordpress cache") wpdocker_wordpress_cache_command ;;
    "wordpress plugin") wpdocker_wordpress_plugin_command ;;
    "wordpress plugin auto-update") wpdocker_wordpress_plugin_auto_update_command ;;
    "wordpress security") wpdocker_wordpress_security_command ;;
    "wordpress security wplogin") wpdocker_wordpress_security_wplogin_command ;;
    "system") wpdocker_system_command ;;
    "system check") wpdocker_system_check_command ;;
    "system check resources") wpdocker_system_check_resources_command ;;
    "system check disk") wpdocker_system_check_disk_command ;;
    "system manage") wpdocker_system_manage_command ;;
    "system cleanup") wpdocker_system_cleanup_command ;;
    "cron") wpdocker_cron_command ;;
    "cron letsencrypt") wpdocker_cron_letsencrypt_command ;;
    "cron letsencrypt renew") wpdocker_cron_letsencrypt_renew_command ;;
    "cron all") wpdocker_cron_all_command ;;
    "core") wpdocker_core_command ;;
    "core version") wpdocker_core_version_command ;;
    "core update") wpdocker_core_update_command ;;
    "core upgrade") wpdocker_core_upgrade_command ;;
    "core uninstall") wpdocker_core_uninstall_command ;;
    "core channel") wpdocker_core_channel_command ;;
    "core channel change") wpdocker_core_channel_change_command ;;
    "core channel check") wpdocker_core_channel_check_command ;;
    "core lang") wpdocker_core_lang_command ;;
    "core lang change") wpdocker_core_lang_change_command ;;
    "core lang check") wpdocker_core_lang_check_command ;;
    "core lang list") wpdocker_core_lang_list_command ;;
    "nginx") wpdocker_nginx_command ;;
    "nginx rebuild") wpdocker_nginx_rebuild_command ;;
    "nginx restart") wpdocker_nginx_restart_command ;;
    "nginx reload") wpdocker_nginx_reload_command ;;
    "rclone") wpdocker_rclone_command ;;
    "rclone config") wpdocker_rclone_config_command ;;
    "rclone upload") wpdocker_rclone_upload_command ;;
    "rclone upload backup") wpdocker_rclone_upload_backup_command ;;
    "rclone delete") wpdocker_rclone_delete_command ;;
    "rclone list") wpdocker_rclone_list_command ;;
    "debug") wpdocker_debug_command ;;
    "debug mode") wpdocker_debug_mode_command ;;
    "debug logs") wpdocker_debug_logs_command ;;
  esac

  after_hook
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
