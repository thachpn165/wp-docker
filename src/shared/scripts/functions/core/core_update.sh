#!/bin/bash

# === üß† T·ª± ƒë·ªông x√°c ƒë·ªãnh PROJECT_DIR (g·ªëc m√£ ngu·ªìn) ===
if [[ -z "$PROJECT_DIR" ]]; then
  SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]:-$0}")"
  while [[ "$SCRIPT_PATH" != "/" ]]; do
    if [[ -f "$SCRIPT_PATH/shared/config/config.sh" ]]; then
      PROJECT_DIR="$SCRIPT_PATH"
      break
    fi
    SCRIPT_PATH="$(dirname "$SCRIPT_PATH")"
  done
fi

# === ‚úÖ Load config.sh t·ª´ PROJECT_DIR ===
CONFIG_FILE="$PROJECT_DIR/shared/config/config.sh"
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå Kh√¥ng t√¨m th·∫•y config.sh t·∫°i: $CONFIG_FILE" >&2
  exit 1
fi
source "$CONFIG_FILE"

# H√†m ki·ªÉm tra th∆∞ m·ª•c c√†i ƒë·∫∑t
core_check_install_dir() {
  if [[ ! -d "$INSTALL_DIR" ]]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y $INSTALL_DIR. B·∫°n c·∫ßn c√†i ƒë·∫∑t b·∫±ng install.sh tr∆∞·ªõc." | tee -a "$LOG_FILE"
    exit 1
  fi
}

# H√†m t·∫£i b·∫£n release m·ªõi nh·∫•t t·ª´ GitHub
core_download_latest_release() {
  echo "üì• T·∫£i b·∫£n release m·ªõi nh·∫•t t·ª´ GitHub..." | tee -a "$LOG_FILE"
  curl -L "$REPO_URL/releases/latest/download/wp-docker.zip" -o "$ZIP_NAME"
}

# H√†m gi·∫£i n√©n b·∫£n release v√†o th∆∞ m·ª•c t·∫°m
core_extract_release() {
  echo "üìÅ Gi·∫£i n√©n v√†o th∆∞ m·ª•c t·∫°m: $TMP_DIR" | tee -a "$LOG_FILE"
  rm -rf "$TMP_DIR"
  mkdir -p "$TMP_DIR"
  unzip -q "$ZIP_NAME" -d "$TMP_DIR"
  rm "$ZIP_NAME"
}

# H√†m c·∫≠p nh·∫≠t c√°c file h·ªá th·ªëng t·ª´ b·∫£n release m·ªõi
core_update_system_files() {
  echo "‚ôªÔ∏è ƒêang c·∫≠p nh·∫≠t c√°c file h·ªá th·ªëng..." | tee -a "$LOG_FILE"
  rsync -a --delete \
    --exclude='/sites/' \
    --exclude='/logs/' \
    --exclude='/archives/' \
    "$TMP_DIR/" "$INSTALL_DIR/" | tee -a "$LOG_FILE"
}

# H√†m c·∫≠p nh·∫≠t file version.txt v·ªõi phi√™n b·∫£n m·ªõi
core_update_version_file() {
  NEW_VERSION=$(cat "$TMP_DIR/$CORE_VERSION_FILE")
  echo "$NEW_VERSION" > "$INSTALL_DIR/version.txt"
  echo "‚úÖ ƒê√£ c·∫≠p nh·∫≠t WP Docker l√™n phi√™n b·∫£n: $NEW_VERSION" | tee -a "$LOG_FILE"
}

# H√†m d·ªçn d·∫πp c√°c file t·∫°m
core_cleanup() {
  rm -rf "$TMP_DIR"
}

# H√†m ki·ªÉm tra v√† li·ªát k√™ c√°c website s·ª≠ d·ª•ng template c≈©
core_check_template_version() {
  TEMPLATE_VERSION_NEW=$(cat "$INSTALL_DIR/shared/templates/.template_version" 2>/dev/null || echo "0.0.0")
  echo "üîß Template version hi·ªán t·∫°i: $TEMPLATE_VERSION_NEW" | tee -a "$LOG_FILE"
  echo "üîç ƒêang ki·ªÉm tra c√°c site d√πng template c≈©..." | tee -a "$LOG_FILE"

  outdated_sites=()

  for site_path in "$INSTALL_DIR/sites/"*/; do
    [ -d "$site_path" ] || continue
    site_name=$(basename "$site_path")
    site_ver_file="$site_path/.template_version"

    site_template_version=$(cat "$site_ver_file" 2>/dev/null || echo "unknown")

    if [[ "$site_template_version" != "$TEMPLATE_VERSION_NEW" ]]; then
      outdated_sites+=("$site_name ($site_template_version)")
    fi
  done

  if [[ ${#outdated_sites[@]} -eq 0 ]]; then
    echo "‚úÖ T·∫•t c·∫£ site ƒëang d√πng template m·ªõi nh·∫•t." | tee -a "$LOG_FILE"
  else
    echo "‚ö†Ô∏è C√°c site sau ƒëang d√πng template C≈®:" | tee -a "$LOG_FILE"
    for s in "${outdated_sites[@]}"; do
      echo "  - $s ‚Üí n√™n c·∫≠p nh·∫≠t l√™n $TEMPLATE_VERSION_NEW" | tee -a "$LOG_FILE"
    done
    echo ""
    echo "üëâ V√†o menu ch√≠nh (main.sh) ‚Üí ch·ªçn 'C·∫≠p nh·∫≠t c·∫•u h√¨nh website ƒë√£ c√†i'" | tee -a "$LOG_FILE"
  fi
}

# H√†m ch·∫°y c√°c script n√¢ng c·∫•p n·∫øu c√≥ trong th∆∞ m·ª•c upgrade
core_run_upgrade_scripts() {
  UPGRADE_DIR="$INSTALL_DIR/upgrade/$NEW_VERSION"
  if [[ -d "$UPGRADE_DIR" ]]; then
    echo "üöÄ T√¨m th·∫•y th∆∞ m·ª•c upgrade cho phi√™n b·∫£n $NEW_VERSION. ƒêang ch·∫°y c√°c script trong ƒë√≥..." | tee -a "$LOG_FILE"

    # Ch·∫°y t·∫•t c·∫£ c√°c script trong th∆∞ m·ª•c upgrade/{version}
    for script in "$UPGRADE_DIR"/*.sh; do
      if [[ -f "$script" ]]; then
        echo "üéØ ƒêang ch·∫°y script n√¢ng c·∫•p: $script" | tee -a "$LOG_FILE"
        bash "$script" | tee -a "$LOG_FILE"
      fi
    done
  else
    echo "‚úÖ Kh√¥ng c√≥ script n√¢ng c·∫•p n√†o cho phi√™n b·∫£n $NEW_VERSION." | tee -a "$LOG_FILE"
  fi
}

# Ch·∫°y to√†n b·ªô quy tr√¨nh c·∫≠p nh·∫≠t
core_update_system() {
  core_check_install_dir
  core_download_latest_release
  core_extract_release
  core_update_system_files
  core_update_version_file
  core_check_template_version
  core_run_upgrade_scripts
  core_cleanup
}
