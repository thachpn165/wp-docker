#!/bin/bash
# âœ… Load configuration from any location
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]:-$0}")"
SEARCH_PATH="$SCRIPT_PATH"
while [[ "$SEARCH_PATH" != "/" ]]; do
  if [[ -f "$SEARCH_PATH/shared/config/load_config.sh" ]]; then
    source "$SEARCH_PATH/shared/config/load_config.sh"
    load_config_file
    break
  fi
  SEARCH_PATH="$(dirname "$SEARCH_PATH")"
done


# Load necessary functions
source "$FUNCTIONS_DIR/rclone/setup_rclone.sh"
source "$FUNCTIONS_DIR/rclone/upload_backup.sh"
source "$FUNCTIONS_DIR/rclone/manage_rclone.sh"
source "$FUNCTIONS_DIR/php/php_edit_conf.sh"
source "$FUNCTIONS_DIR/php/php_edit_phpini.sh"
source "$FUNCTIONS_DIR/core/core_version_management.sh"


# Load CLI functions
source  "$CLI_DIR/core_lang.sh"

# Define subcommands handlers
handle_website() {
    # wpdocker website
    case "$1" in
        create) bash "$CLI_DIR/website_create.sh" "${@:2}" ;;
        delete) bash "$CLI_DIR/website_delete.sh" "${@:2}" ;;
        list) bash "$CLI_DIR/website_list.sh" "${@:2}" ;;
        restart) bash "$CLI_DIR/website_restart.sh" "${@:2}" ;;
        logs) bash "$CLI_DIR/website_logs.sh" "${@:2}" ;;
        info) bash "$CLI_DIR/website_info.sh" "${@:2}" ;;
        update_template) bash "$CLI_DIR/website_update_template.sh" "${@:2}" ;;
        *) echo "${CROSSMARK} Unknown subcommand for website: $1" ;;
    esac
}

handle_ssl() {
    
    case "$1" in
        selfsigned) bash "$CLI_DIR/ssl_create.sh" "${@:2}" ;;
        letsencrypt) bash "$CLI_DIR/ssl_create.sh" "${@:2}" ;;
        check) bash "$CLI_DIR/ssl_check_status.sh" "${@:2}" ;;
        *) echo "${CROSSMARK} Unknown subcommand for ssl: $1" ;;
    esac
}

handle_backup() {
    # wpdocker backup
    case "$1" in
        website) bash "$FUNCTIONS_DIR/backup/backup_website.sh" "${@:2}" ;;
        database) bash "$FUNCTIONS_DIR/backup/backup_database.sh" "${@:2}" ;;
        file) bash "$FUNCTIONS_DIR/backup/backup_file.sh" "${@:2}" ;;
        *) echo "${CROSSMARK} Unknown subcommand for backup: $1" ;;
    esac
}

handle_php() {
    case "$1" in
        change) bash "$CLI_DIR/php_change_version.sh" "${@:2}" ;;
        get) bash "$CLI_DIR/php_get_version.sh" "${@:2}" ;;
        rebuild) bash "$CLI_DIR/php_rebuild_container.sh" "${@:2}" ;;
        edit)
            case "$2" in
                conf) edit_php_fpm_conf "${@:3}" ;;
                ini) edit_php_ini "${@:3}" ;;
                *) echo "${CROSSMARK} Unknown subcommand for php edit: $2" ;;
            esac
            ;;
        *) echo "${CROSSMARK} Unknown subcommand for php: $1" ;;
    esac
}

handle_database() {
    case "$1" in
        reset) bash "$CLI_DIR/database_reset.sh" "${@:2}" ;;
        import) bash "$CLI_DIR/database_import.sh" "${@:2}" ;;
        export) bash "$CLI_DIR/database_export.sh" "${@:2}" ;;
        *) echo "${CROSSMARK} Unknown subcommand for database: $1" ;;
    esac
}

handle_system() {
    # wpdocker system
    case "$1" in
        check) bash "$CLI_DIR/system_check_resources.sh" "${@:2}" ;;
        manage) bash "$CLI_DIR/system_manage_docker.sh" "${@:2}" ;;
        cleanup) bash "$CLI_DIR/system_cleanup_docker.sh" "${@:2}" ;;
        nginx) 
            case "$2" in
                rebuild) bash "$CLI_DIR/system_nginx_rebuild.sh" "${@:3}" ;;
                restart) bash "$CLI_DIR/system_nginx_restart.sh" "${@:3}" ;;
                reload) nginx_reload ;;
                *) echo "${CROSSMARK} Unknown subcommand for nginx: $2" ;;
            esac
            ;;
        *) echo "${CROSSMARK} Unknown subcommand for system: $1" ;;
    esac
}

handle_wordpress() {
    # wpdocker wordpress
    case "$1" in
        cli) bash "$CLI_DIR/wordpress_wp_cli.sh" "${@:2}" ;;
        migrate) bash "$CLI_DIR/wordpress_migration.sh" "${@:2}" ;;
        reset) 
            case "$2" in
                password) bash "$CLI_DIR/wordpress_reset_admin_password.sh" "${@:3}" ;;
                role) bash "$CLI_DIR/wordpress_reset_user_role.sh" "${@:3}" ;;
                *) echo "${CROSSMARK} Unknown subcommand for wordpress reset: $2" ;;
            esac
            ;;
        cache)
            bash "$CLI_DIR/wordpress_cache_setup.sh" "${@:2}" ;;
        *) echo "${CROSSMARK} Unknown subcommand for wordpress: $1" ;;
    esac
}

handle_core() {
    # wpdocker core
    case "$1" in
        version) bash "$CLI_DIR/core_display_version.sh" "${@:2}" ;;
        update) bash "$CLI_DIR/core_update.sh" "${@:2}" ;;
        lang) 
            case "$2" in
                change) core_lang_cli_change "${@:3}" ;;
                check) core_lang_cli_get ;;
                list) core_lang_cli_list ;;
                *) echo "${CROSSMARK} Unknown subcommand for core lang: $2" ;;
            esac
            ;;
        *) echo "${CROSSMARK} Unknown subcommand for core: $1" ;;
    esac
}


# Main subcommands handler
if [[ -z "$1" ]]; then
    # If no subcommand is provided, call the main menu
    echo "ðŸ’¡ No subcommand provided. Running the main menu..."
    bash "$INSTALL_DIR/main.sh"
else
    case "$1" in
        website) handle_website "$2" "${@:3}" ;;
        ssl) handle_ssl "$2" "${@:3}" ;;
        backup) handle_backup "$2" "${@:3}" ;;
        php) handle_php "$2" "${@:3}" ;;
        database) handle_database "$2" "${@:3}" ;;
        system) handle_system "$2" "${@:3}" ;;
        wordpress) handle_wordpress "$2" "${@:3}" ;;
        core) handle_core "$2" "${@:3}" ;;
        *)
            echo "${CROSSMARK} Unknown subcommand: $1"
            #bash "$INSTALL_DIR/main.sh"
            ;;
    esac
fi