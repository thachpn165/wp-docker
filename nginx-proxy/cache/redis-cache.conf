# ðŸš€ Redis Full Page Cache Configuration
set $skip_cache 0;

if ($http_cookie ~* "wordpress_logged_in|comment_author") {
    set $skip_cache 1;
}

location / {
    set $cache_key "nginx-cache:$scheme$request_method$host$request_uri";

    access_by_lua_block {
        local redis = require "resty.redis"
        local red = redis:new()
        red:set_timeout(1000)

        local ok, err = red:connect("172.18.0.4", 6379)  -- Káº¿t ná»‘i Redis
        if not ok then
            ngx.log(ngx.ERR, "Redis connection failed: ", err)
            return
        end

        local res, err = red:get(ngx.var.cache_key)
        if res and res ~= ngx.null then
            ngx.header["X-Cache-Status"] = "HIT"
            ngx.header["Content-Type"] = "text/html"
            ngx.say(res)
            return ngx.exit(ngx.HTTP_OK)
        else
            ngx.ctx.cache_miss = true
        end
    }

    # ðŸ”¥ Chá»‰ gá»­i request Ä‘áº¿n PHP náº¿u cache MISS
    include fastcgi_params;
    fastcgi_pass wpdocker-php:9000;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME /var/www/html/index.php;

    header_filter_by_lua_block {
        if ngx.ctx.cache_miss then
            ngx.header["X-Cache-Status"] = "MISS"
        else
            ngx.header["X-Cache-Status"] = "HIT"
        end
    }

    body_filter_by_lua_block {
        if ngx.ctx.cache_miss and ngx.arg[2] then
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(1000)

            local ok, err = red:connect("172.18.0.4", 6379)  -- Káº¿t ná»‘i Redis
            if not ok then
                ngx.log(ngx.ERR, "Redis connection error: ", err)
                return
            end

            local res, err = red:set(ngx.var.cache_key, ngx.arg[1])
            if not res then
                ngx.log(ngx.ERR, "Redis set error: ", err)
            end

            red:expire(ngx.var.cache_key, 600)  -- Cache trong 10 phÃºt
        end
    }

    add_header X-Debug-Test "Header-Working" always;
}
